diff -u srcorig/act_comm.c src/act_comm.c
--- srcorig/act_comm.c	2004-12-01 08:18:50.000000000 -0600
+++ src/act_comm.c	2004-12-01 08:42:24.000000000 -0600
@@ -220,7 +220,7 @@
 		vnum++;
 	    }
 	}
-	send_to_char( buf1, ch );
+	mxp_to_char( buf1, ch, MXP_ALL );
 	return;
     }
 
@@ -252,13 +252,13 @@
 		    strcat( buf1, buf );
 		    strcat( buf1, pnote->text );
 		    ch->last_note = UMAX( ch->last_note, pnote->date_stamp );
-		    send_to_char( buf1, ch );
+		    mxp_to_char( buf1, ch, MXP_ALL );
 		    return;
 		}
 		else
 		    vnum++;
 	    }
-	    send_to_char( "You have no unread notes.\n\r", ch );
+	    mxp_to_char( "You have no unread notes.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	else if ( is_number( argument ) )
@@ -268,7 +268,7 @@
 	}
 	else
 	{
-	    send_to_char( "Note read which number?\n\r", ch );
+	    mxp_to_char( "Note read which number?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -286,13 +286,13 @@
 		    );
 		strcat( buf1, buf );
 		strcat( buf1, pnote->text );
-		send_to_char( buf1, ch );
+		mxp_to_char( buf1, ch, MXP_ALL );
 		ch->last_note = UMAX( ch->last_note, pnote->date_stamp );
 		return;
 	    }
 	}
 
-	send_to_char( "No such note.\n\r", ch );
+	mxp_to_char( "No such note.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -302,7 +302,7 @@
 	strcpy( buf, ch->pnote->text );
 	if ( strlen(buf) + strlen(argument) >= MAX_STRING_LENGTH - 200 )
 	{
-	    send_to_char( "Note too long.\n\r", ch );
+	    mxp_to_char( "Note too long.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -310,7 +310,7 @@
 	strcat( buf, "\n\r" );
 	free_string( ch->pnote->text );
 	ch->pnote->text = str_dup( buf );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -319,7 +319,7 @@
 	note_attach( ch );
 	free_string( ch->pnote->subject );
 	ch->pnote->subject = str_dup( argument );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -328,7 +328,7 @@
 	note_attach( ch );
 	free_string( ch->pnote->to_list );
 	ch->pnote->to_list = str_dup( argument );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -346,7 +346,7 @@
 	    ch->pnote		= NULL;
 	}
 
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -354,7 +354,7 @@
     {
 	if ( ch->pnote == NULL )
 	{
-	    send_to_char( "You have no note in progress.\n\r", ch );
+	    mxp_to_char( "You have no note in progress.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -363,8 +363,8 @@
 	    ch->pnote->subject,
 	    ch->pnote->to_list
 	    );
-	send_to_char( buf, ch );
-	send_to_char( ch->pnote->text, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
+	mxp_to_char( ch->pnote->text, ch, MXP_ALL );
 	return;
     }
 
@@ -375,21 +375,21 @@
 
 	if ( ch->pnote == NULL )
 	{
-	    send_to_char( "You have no note in progress.\n\r", ch );
+	    mxp_to_char( "You have no note in progress.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !str_cmp( ch->pnote->to_list, "" ) )
 	{
-	    send_to_char(
+	    mxp_to_char(
 	      "You need to provide a recipient (name, all, or immortal).\n\r",
-			 ch );
+			 ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !str_cmp( ch->pnote->subject, "" ) )
 	{
-	    send_to_char( "You need to provide a subject.\n\r", ch );
+	    mxp_to_char( "You need to provide a subject.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -429,7 +429,7 @@
 	}
 	fpReserve = fopen( NULL_FILE, "r" );
 
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -437,7 +437,7 @@
     {
 	if ( !is_number( argument ) )
 	{
-	    send_to_char( "Note remove which number?\n\r", ch );
+	    mxp_to_char( "Note remove which number?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -448,16 +448,16 @@
 	    if ( is_note_to( ch, pnote ) && vnum++ == anum )
 	    {
 		note_remove( ch, pnote );
-		send_to_char( "Ok.\n\r", ch );
+		mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
 
-	send_to_char( "No such note.\n\r", ch );
+	mxp_to_char( "No such note.\n\r", ch, MXP_ALL );
 	return;
     }
 
-    send_to_char( "Huh?  Type 'help note' for usage.\n\r", ch );
+    mxp_to_char( "Huh?  Type 'help note' for usage.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -482,7 +482,7 @@
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) )
     {
 	sprintf( buf, "You can't %s.\n\r", verb );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	return;
     }
 
@@ -492,7 +492,7 @@
     {
     default:
 	sprintf( buf, "You %s '%s'.\n\r", verb, argument );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	sprintf( buf, "$n %ss '$t'.",     verb );
 	break;
 
@@ -608,7 +608,7 @@
 {
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Say what?\n\r", ch );
+	mxp_to_char( "Say what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -628,7 +628,7 @@
 
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) )
     {
-	send_to_char( "Your message didn't get through.\n\r", ch );
+	mxp_to_char( "Your message didn't get through.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -636,7 +636,7 @@
 
     if ( arg[0] == '\0' || argument[0] == '\0' )
     {
-	send_to_char( "Tell whom what?\n\r", ch );
+	mxp_to_char( "Tell whom what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -647,7 +647,7 @@
     if ( ( victim = get_char_world( ch, arg ) ) == NULL
     || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -676,13 +676,13 @@
 
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) )
     {
-	send_to_char( "Your message didn't get through.\n\r", ch );
+	mxp_to_char( "Your message didn't get through.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = ch->reply ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -711,13 +711,13 @@
 
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
     {
-	send_to_char( "You can't show your emotions.\n\r", ch );
+	mxp_to_char( "You can't show your emotions.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Emote what?\n\r", ch );
+	mxp_to_char( "Emote what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -993,7 +993,7 @@
 void do_bug( CHAR_DATA *ch, char *argument )
 {
     append_file( ch, BUG_FILE, argument );
-    send_to_char( "Ok.  Thanks.\n\r", ch );
+    mxp_to_char( "Ok.  Thanks.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1002,7 +1002,7 @@
 void do_idea( CHAR_DATA *ch, char *argument )
 {
     append_file( ch, IDEA_FILE, argument );
-    send_to_char( "Ok.  Thanks.\n\r", ch );
+    mxp_to_char( "Ok.  Thanks.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1011,7 +1011,7 @@
 void do_typo( CHAR_DATA *ch, char *argument )
 {
     append_file( ch, TYPO_FILE, argument );
-    send_to_char( "Ok.  Thanks.\n\r", ch );
+    mxp_to_char( "Ok.  Thanks.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1019,7 +1019,7 @@
 
 void do_rent( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "There is no rent here.  Just save and quit.\n\r", ch );
+    mxp_to_char( "There is no rent here.  Just save and quit.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1027,7 +1027,7 @@
 
 void do_qui( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "If you want to QUIT, you have to spell it out.\n\r", ch );
+    mxp_to_char( "If you want to QUIT, you have to spell it out.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1042,19 +1042,19 @@
 
     if ( ch->position == POS_FIGHTING )
     {
-	send_to_char( "No way! You are fighting.\n\r", ch );
+	mxp_to_char( "No way! You are fighting.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->position  < POS_STUNNED  )
     {
-	send_to_char( "You're not DEAD yet.\n\r", ch );
+	mxp_to_char( "You're not DEAD yet.\n\r", ch, MXP_ALL );
 	return;
     }
 
-    send_to_char( 
+    mxp_to_char( 
 	"Had I but time--as this fell sergeant, Death,\n\rIs strict in his arrest--O, I could tell you--\n\rBut let it be.\n\r",
-	ch );
+	ch, MXP_ALL );
     act( "$n has left the game.", ch, NULL, NULL, TO_ROOM );
     sprintf( log_buf, "%s has quit.", ch->name );
     log_string( log_buf );
@@ -1080,12 +1080,12 @@
 
     if ( ch->level < 2 )
     {
-	send_to_char( "You must be at least second level to save.\n\r", ch );
+	mxp_to_char( "You must be at least second level to save.\n\r", ch, MXP_ALL );
 	return;
     }
 
     save_char_obj( ch );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1100,13 +1100,13 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Follow whom?\n\r", ch );
+	mxp_to_char( "Follow whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1121,7 +1121,7 @@
     {
 	if ( ch->master == NULL )
 	{
-	    send_to_char( "You already follow yourself.\n\r", ch );
+	    mxp_to_char( "You already follow yourself.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	stop_follower( ch );
@@ -1131,7 +1131,7 @@
     if ( ( ch->level - victim->level < -5 || ch->level - victim->level >  5 )
     &&   !IS_HERO(ch) )
     {
-	send_to_char( "You are not of the right caliber to follow.\n\r", ch );
+	mxp_to_char( "You are not of the right caliber to follow.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1229,13 +1229,13 @@
 
     if ( arg[0] == '\0' || argument[0] == '\0' )
     {
-	send_to_char( "Order whom to do what?\n\r", ch );
+	mxp_to_char( "Order whom to do what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_AFFECTED( ch, AFF_CHARM ) )
     {
-	send_to_char( "You feel like taking, not giving, orders.\n\r", ch );
+	mxp_to_char( "You feel like taking, not giving, orders.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1249,19 +1249,19 @@
 	fAll   = FALSE;
 	if ( ( victim = get_char_room( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "They aren't here.\n\r", ch );
+	    mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( victim == ch )
 	{
-	    send_to_char( "Aye aye, right away!\n\r", ch );
+	    mxp_to_char( "Aye aye, right away!\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !IS_AFFECTED(victim, AFF_CHARM) || victim->master != ch )
 	{
-	    send_to_char( "Do it yourself!\n\r", ch );
+	    mxp_to_char( "Do it yourself!\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1282,9 +1282,9 @@
     }
 
     if ( found )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     else
-	send_to_char( "You have no followers here.\n\r", ch );
+	mxp_to_char( "You have no followers here.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1305,7 +1305,7 @@
 
 	leader = (ch->leader != NULL) ? ch->leader : ch;
 	sprintf( buf, "%s's group:\n\r", PERS(leader, ch) );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 
 	for ( gch = char_list; gch != NULL; gch = gch->next )
 	{
@@ -1320,7 +1320,7 @@
 		    gch->mana,  gch->max_mana,
 		    gch->move,  gch->max_move,
 		    gch->exp    );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 	    }
 	}
 	return;
@@ -1328,13 +1328,13 @@
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
     {
-	send_to_char( "But you are following someone else!\n\r", ch );
+	mxp_to_char( "But you are following someone else!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1388,7 +1388,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Split how much?\n\r", ch );
+	mxp_to_char( "Split how much?\n\r", ch, MXP_ALL );
 	return;
     }
     
@@ -1396,19 +1396,19 @@
 
     if ( amount < 0 )
     {
-	send_to_char( "Your group wouldn't like that.\n\r", ch );
+	mxp_to_char( "Your group wouldn't like that.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( amount == 0 )
     {
-	send_to_char( "You hand out zero coins, but no one notices.\n\r", ch );
+	mxp_to_char( "You hand out zero coins, but no one notices.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->gold < amount )
     {
-	send_to_char( "You don't have that much gold.\n\r", ch );
+	mxp_to_char( "You don't have that much gold.\n\r", ch, MXP_ALL );
 	return;
     }
   
@@ -1421,7 +1421,7 @@
 
     if ( members < 2 )
     {
-	send_to_char( "Just keep it all.\n\r", ch );
+	mxp_to_char( "Just keep it all.\n\r", ch, MXP_ALL );
 	return;
     }
 	    
@@ -1430,7 +1430,7 @@
 
     if ( share == 0 )
     {
-	send_to_char( "Don't even bother, cheapskate.\n\r", ch );
+	mxp_to_char( "Don't even bother, cheapskate.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1440,7 +1440,7 @@
     sprintf( buf,
 	"You split %d gold coins.  Your share is %d gold coins.\n\r",
 	amount, share + extra );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "$n splits %d gold coins.  Your share is %d gold coins.",
 	amount, share );
@@ -1466,24 +1466,24 @@
 
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Tell your group what?\n\r", ch );
+	mxp_to_char( "Tell your group what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_SET( ch->act, PLR_NO_TELL ) )
     {
-	send_to_char( "Your message didn't get through!\n\r", ch );
+	mxp_to_char( "Your message didn't get through!\n\r", ch, MXP_ALL );
 	return;
     }
 
     /*
-     * Note use of send_to_char, so gtell works on sleepers.
+     * Note use of mxp_to_char, so gtell works on sleepers.
      */
     sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
     for ( gch = char_list; gch != NULL; gch = gch->next )
     {
 	if ( is_same_group( gch, ch ) )
-	    send_to_char( buf, gch );
+	    mxp_to_char( buf, gch, MXP_ALL );
     }
 
     return;
diff -u srcorig/act_info.c src/act_info.c
--- srcorig/act_info.c	2004-12-01 08:18:50.000000000 -0600
+++ src/act_info.c	2004-12-06 10:13:10.000000000 -0600
@@ -104,13 +104,18 @@
 {
     char buf[MAX_STRING_LENGTH];
     char **prgpstrShow;
+    char **prgpstrName;
     int *prgnShow;
     char *pstrShow;
+    char *pstrName;
     OBJ_DATA *obj;
     int nShow;
     int iShow;
     int count;
     bool fCombine;
+    bool inv;
+
+    inv = FALSE;
 
     if ( ch->desc == NULL )
 	return;
@@ -122,6 +127,7 @@
     for ( obj = list; obj != NULL; obj = obj->next_content )
 	count++;
     prgpstrShow	= alloc_mem( count * sizeof(char *) );
+    prgpstrName	= alloc_mem( count * sizeof(char *) );
     prgnShow    = alloc_mem( count * sizeof(int)    );
     nShow	= 0;
 
@@ -133,6 +139,10 @@
 	if ( obj->wear_loc == WEAR_NONE && can_see_obj( ch, obj ) )
 	{
 	    pstrShow = format_obj_to_char( obj, ch, fShort );
+	    pstrName = ( obj->name );
+	    if ( obj->carried_by != NULL )
+		inv = TRUE;
+
 	    fCombine = FALSE;
 
 	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
@@ -158,6 +168,7 @@
 	    if ( !fCombine )
 	    {
 		prgpstrShow [nShow] = str_dup( pstrShow );
+		prgpstrName [nShow] = str_dup( pstrName );
 		prgnShow    [nShow] = 1;
 		nShow++;
 	    }
@@ -174,23 +185,23 @@
 	    if ( prgnShow[iShow] != 1 )
 	    {
 		sprintf( buf, "(%2d) ", prgnShow[iShow] );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 	    }
 	    else
 	    {
-		send_to_char( "     ", ch );
+		mxp_to_char( "     ", ch, MXP_ALL );
 	    }
 	}
-	send_to_char( prgpstrShow[iShow], ch );
-	send_to_char( "\n\r", ch );
+	mxp_to_char( prgpstrShow[iShow], ch, MXP_ALL );
+	mxp_to_char( "\n\r", ch, MXP_ALL );
 	free_string( prgpstrShow[iShow] );
     }
 
     if ( fShowNothing && nShow == 0 )
     {
 	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
-	    send_to_char( "     ", ch );
-	send_to_char( "Nothing.\n\r", ch );
+	    mxp_to_char( "     ", ch, MXP_ALL );
+	mxp_to_char( "Nothing.\n\r", ch, MXP_ALL );
     }
 
     /*
@@ -226,7 +237,7 @@
     if ( victim->position == POS_STANDING && victim->long_descr[0] != '\0' )
     {
 	strcat( buf, victim->long_descr );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	return;
     }
 
@@ -261,7 +272,7 @@
 
     strcat( buf, "\n\r" );
     buf[0] = UPPER(buf[0]);
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -283,7 +294,7 @@
 
     if ( victim->description[0] != '\0' )
     {
-	send_to_char( victim->description, ch );
+	mxp_to_char( victim->description, ch, MXP_ALL );
     }
     else
     {
@@ -310,7 +321,7 @@
     else                       strcat( buf, " is DYING.\n\r"              );
 
     buf[0] = UPPER(buf[0]);
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     found = FALSE;
     for ( iWear = 0; iWear < MAX_WEAR; iWear++ )
@@ -320,13 +331,13 @@
 	{
 	    if ( !found )
 	    {
-		send_to_char( "\n\r", ch );
+		mxp_to_char( "\n\r", ch, MXP_ALL );
 		act( "$N is using:", ch, NULL, victim, TO_CHAR );
 		found = TRUE;
 	    }
-	    send_to_char( where_name[iWear], ch );
-	    send_to_char( format_obj_to_char( obj, ch, TRUE ), ch );
-	    send_to_char( "\n\r", ch );
+	    mxp_to_char( where_name[iWear], ch, MXP_ALL );
+	    mxp_to_char( format_obj_to_char( obj, ch, TRUE ), ch, MXP_ALL );
+	    mxp_to_char( "\n\r", ch, MXP_ALL );
 	}
     }
 
@@ -334,7 +345,7 @@
     &&   !IS_NPC(ch)
     &&   number_percent( ) < ch->pcdata->learned[gsn_peek] )
     {
-	send_to_char( "\n\rYou peek at the inventory:\n\r", ch );
+	mxp_to_char( "\n\rYou peek at the inventory:\n\r", ch, MXP_ALL );
 	show_list_to_char( victim->carrying, ch, TRUE, TRUE );
     }
 
@@ -364,7 +375,7 @@
 	else if ( room_is_dark( ch->in_room )
 	&&        IS_AFFECTED(rch, AFF_INFRARED ) )
 	{
-	    send_to_char( "You see glowing red eyes watching YOU!\n\r", ch );
+	    mxp_to_char( "You see glowing red eyes watching YOU!\n\r", ch, MXP_ALL );
 	}
     }
 
@@ -380,7 +391,7 @@
 
     if ( IS_AFFECTED(ch, AFF_BLIND) )
     {
-	send_to_char( "You can't see a thing!\n\r", ch );
+	mxp_to_char( "You can't see a thing!\n\r", ch, MXP_ALL );
 	return FALSE;
     }
 
@@ -405,13 +416,13 @@
 
     if ( ch->position < POS_SLEEPING )
     {
-	send_to_char( "You can't see anything but stars!\n\r", ch );
+	mxp_to_char( "You can't see anything but stars!\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->position == POS_SLEEPING )
     {
-	send_to_char( "You can't see anything, you're sleeping!\n\r", ch );
+	mxp_to_char( "You can't see anything, you're sleeping!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -422,7 +433,7 @@
     &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
     &&   room_is_dark( ch->in_room ) )
     {
-	send_to_char( "It is pitch black ... \n\r", ch );
+	mxp_to_char( "It is pitch black ... \n\r", ch, MXP_ALL );
 	show_char_to_char( ch->in_room->people, ch );
 	return;
     }
@@ -433,15 +444,15 @@
     if ( arg1[0] == '\0' || !str_cmp( arg1, "auto" ) )
     {
 	/* 'look' or 'look auto' */
-	send_to_char( ch->in_room->name, ch );
-	send_to_char( "\n\r", ch );
+	mxp_to_char( ch->in_room->name, ch, MXP_ALL );
+	mxp_to_char( "\n\r", ch, MXP_ALL );
 
 	if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOEXIT) )
 	    do_exits( ch, "auto" );
 
 	if ( arg1[0] == '\0'
 	|| ( !IS_NPC(ch) && !IS_SET(ch->act, PLR_BRIEF) ) )
-	    send_to_char( ch->in_room->description, ch );
+	    mxp_to_char( ch->in_room->description, ch, MXP_ALL );
 
 	show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE );
 	show_char_to_char( ch->in_room->people,   ch );
@@ -453,26 +464,26 @@
 	/* 'look in' */
 	if ( arg2[0] == '\0' )
 	{
-	    send_to_char( "Look in what?\n\r", ch );
+	    mxp_to_char( "Look in what?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ( obj = get_obj_here( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "You do not see that here.\n\r", ch );
+	    mxp_to_char( "You do not see that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	switch ( obj->item_type )
 	{
 	default:
-	    send_to_char( "That is not a container.\n\r", ch );
+	    mxp_to_char( "That is not a container.\n\r", ch, MXP_ALL );
 	    break;
 
 	case ITEM_DRINK_CON:
 	    if ( obj->value[1] <= 0 )
 	    {
-		send_to_char( "It is empty.\n\r", ch );
+		mxp_to_char( "It is empty.\n\r", ch, MXP_ALL );
 		break;
 	    }
 
@@ -484,7 +495,7 @@
 		liq_table[obj->value[2]].liq_color
 		);
 
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    break;
 
 	case ITEM_CONTAINER:
@@ -492,7 +503,7 @@
 	case ITEM_CORPSE_PC:
 	    if ( IS_SET(obj->value[1], CONT_CLOSED) )
 	    {
-		send_to_char( "It is closed.\n\r", ch );
+		mxp_to_char( "It is closed.\n\r", ch, MXP_ALL );
 		break;
 	    }
 
@@ -516,21 +527,21 @@
 	    pdesc = get_extra_descr( arg1, obj->extra_descr );
 	    if ( pdesc != NULL )
 	    {
-		send_to_char( pdesc, ch );
+		mxp_to_char( pdesc, ch, MXP_ALL );
 		return;
 	    }
 
 	    pdesc = get_extra_descr( arg1, obj->pIndexData->extra_descr );
 	    if ( pdesc != NULL )
 	    {
-		send_to_char( pdesc, ch );
+		mxp_to_char( pdesc, ch, MXP_ALL );
 		return;
 	    }
 	}
 
 	if ( is_name( arg1, obj->name ) )
 	{
-	    send_to_char( obj->description, ch );
+	    mxp_to_char( obj->description, ch, MXP_ALL );
 	    return;
 	}
     }
@@ -542,21 +553,21 @@
 	    pdesc = get_extra_descr( arg1, obj->extra_descr );
 	    if ( pdesc != NULL )
 	    {
-		send_to_char( pdesc, ch );
+		mxp_to_char( pdesc, ch, MXP_ALL );
 		return;
 	    }
 
 	    pdesc = get_extra_descr( arg1, obj->pIndexData->extra_descr );
 	    if ( pdesc != NULL )
 	    {
-		send_to_char( pdesc, ch );
+		mxp_to_char( pdesc, ch, MXP_ALL );
 		return;
 	    }
 	}
 
 	if ( is_name( arg1, obj->name ) )
 	{
-	    send_to_char( obj->description, ch );
+	    mxp_to_char( obj->description, ch, MXP_ALL );
 	    return;
 	}
     }
@@ -564,7 +575,7 @@
     pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
     if ( pdesc != NULL )
     {
-	send_to_char( pdesc, ch );
+	mxp_to_char( pdesc, ch, MXP_ALL );
 	return;
     }
 
@@ -576,21 +587,21 @@
     else if ( !str_cmp( arg1, "d" ) || !str_cmp( arg1, "down"  ) ) door = 5;
     else
     {
-	send_to_char( "You do not see that here.\n\r", ch );
+	mxp_to_char( "You do not see that here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     /* 'look direction' */
     if ( ( pexit = ch->in_room->exit[door] ) == NULL )
     {
-	send_to_char( "Nothing special there.\n\r", ch );
+	mxp_to_char( "Nothing special there.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( pexit->description != NULL && pexit->description[0] != '\0' )
-	send_to_char( pexit->description, ch );
+	mxp_to_char( pexit->description, ch, MXP_ALL );
     else
-	send_to_char( "Nothing special there.\n\r", ch );
+	mxp_to_char( "Nothing special there.\n\r", ch, MXP_ALL );
 
     if ( pexit->keyword    != NULL
     &&   pexit->keyword[0] != '\0'
@@ -621,7 +632,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Examine what?\n\r", ch );
+	mxp_to_char( "Examine what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -638,7 +649,7 @@
 	case ITEM_CONTAINER:
 	case ITEM_CORPSE_NPC:
 	case ITEM_CORPSE_PC:
-	    send_to_char( "When you look inside, you see:\n\r", ch );
+	    mxp_to_char( "When you look inside, you see:\n\r", ch, MXP_ALL );
 	    sprintf( buf, "in %s", arg );
 	    do_look( ch, buf );
 	}
@@ -656,6 +667,7 @@
 {
     extern char * const dir_name[];
     char buf[MAX_STRING_LENGTH];
+    char buf1[MAX_STRING_LENGTH];
     EXIT_DATA *pexit;
     bool found;
     bool fAuto;
@@ -680,7 +692,10 @@
 	    if ( fAuto )
 	    {
 		strcat( buf, " " );
+		sprintf( buf1, "<SEND href=\"%s\">", dir_name[door] );
+		strcat( buf, buf1 );
 		strcat( buf, dir_name[door] );
+		strcat( buf, "</SEND>" );
 	    }
 	    else
 	    {
@@ -700,7 +715,7 @@
     if ( fAuto )
 	strcat( buf, "]\n\r" );
 
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -718,13 +733,17 @@
 	ch->level,
 	get_age(ch),
 	(get_age(ch) - 17) * 2 );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
+
+    sprintf( buf, "You are %susing MCCP!\n\r",
+	ch->desc->out_compress ? "" : "not " );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     if ( get_trust( ch ) != ch->level )
     {
 	sprintf( buf, "You are trusted at level %d.\n\r",
 	    get_trust( ch ) );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
     sprintf( buf,
@@ -733,13 +752,13 @@
 	ch->mana, ch->max_mana,
 	ch->move, ch->max_move,
 	ch->practice );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf,
 	"You are carrying %d/%d items with weight %d/%d kg.\n\r",
 	ch->carry_number, can_carry_n(ch),
 	ch->carry_weight, can_carry_w(ch) );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf,
 	"Str: %d  Int: %d  Wis: %d  Dex: %d  Con: %d.\n\r",
@@ -748,116 +767,116 @@
 	get_curr_wis(ch),
 	get_curr_dex(ch),
 	get_curr_con(ch) );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf,
 	"You have scored %d exp, and have %d gold coins.\n\r",
 	ch->exp,  ch->gold );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf,
 	"Autoexit: %s.  Autoloot: %s.  Autosac: %s.\n\r",
 	(!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOEXIT)) ? "yes" : "no",
 	(!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOLOOT)) ? "yes" : "no",
 	(!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOSAC) ) ? "yes" : "no" );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     
     sprintf( buf, "Wimpy set to %d hit points.\n\r", ch->wimpy );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     if ( !IS_NPC( ch ) )
     {
 	sprintf( buf, "Page pausing set to %d lines of text.\n\r",
 		ch->pcdata->pagelen );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
     if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
-	send_to_char( "You are drunk.\n\r",   ch );
+	mxp_to_char( "You are drunk.\n\r",   ch, MXP_ALL );
     if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
-	send_to_char( "You are thirsty.\n\r", ch );
+	mxp_to_char( "You are thirsty.\n\r", ch, MXP_ALL );
     if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
-	send_to_char( "You are hungry.\n\r",  ch );
+	mxp_to_char( "You are hungry.\n\r",  ch, MXP_ALL );
 
     switch ( ch->position )
     {
     case POS_DEAD:     
-	send_to_char( "You are DEAD!!\n\r",		ch );
+	mxp_to_char( "You are DEAD!!\n\r",		ch, MXP_ALL );
 	break;
     case POS_MORTAL:
-	send_to_char( "You are mortally wounded.\n\r",	ch );
+	mxp_to_char( "You are mortally wounded.\n\r",	ch, MXP_ALL );
 	break;
     case POS_INCAP:
-	send_to_char( "You are incapacitated.\n\r",	ch );
+	mxp_to_char( "You are incapacitated.\n\r",	ch, MXP_ALL );
 	break;
     case POS_STUNNED:
-	send_to_char( "You are stunned.\n\r",		ch );
+	mxp_to_char( "You are stunned.\n\r",		ch, MXP_ALL );
 	break;
     case POS_SLEEPING:
-	send_to_char( "You are sleeping.\n\r",		ch );
+	mxp_to_char( "You are sleeping.\n\r",		ch, MXP_ALL );
 	break;
     case POS_RESTING:
-	send_to_char( "You are resting.\n\r",		ch );
+	mxp_to_char( "You are resting.\n\r",		ch, MXP_ALL );
 	break;
     case POS_STANDING:
-	send_to_char( "You are standing.\n\r",		ch );
+	mxp_to_char( "You are standing.\n\r",		ch, MXP_ALL );
 	break;
     case POS_FIGHTING:
-	send_to_char( "You are fighting.\n\r",		ch );
+	mxp_to_char( "You are fighting.\n\r",		ch, MXP_ALL );
 	break;
     }
 
     if ( ch->level >= 25 )
     {
 	sprintf( buf, "AC: %d.  ", GET_AC(ch) );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
-    send_to_char( "You are ", ch );
-         if ( GET_AC(ch) >=  101 ) send_to_char( "WORSE than naked!\n\r", ch );
-    else if ( GET_AC(ch) >=   80 ) send_to_char( "naked.\n\r",            ch );
-    else if ( GET_AC(ch) >=   60 ) send_to_char( "wearing clothes.\n\r",  ch );
-    else if ( GET_AC(ch) >=   40 ) send_to_char( "slightly armored.\n\r", ch );
-    else if ( GET_AC(ch) >=   20 ) send_to_char( "somewhat armored.\n\r", ch );
-    else if ( GET_AC(ch) >=    0 ) send_to_char( "armored.\n\r",          ch );
-    else if ( GET_AC(ch) >= - 20 ) send_to_char( "well armored.\n\r",     ch );
-    else if ( GET_AC(ch) >= - 40 ) send_to_char( "strongly armored.\n\r", ch );
-    else if ( GET_AC(ch) >= - 60 ) send_to_char( "heavily armored.\n\r",  ch );
-    else if ( GET_AC(ch) >= - 80 ) send_to_char( "superbly armored.\n\r", ch );
-    else if ( GET_AC(ch) >= -100 ) send_to_char( "divinely armored.\n\r", ch );
-    else                           send_to_char( "invincible!\n\r",       ch );
+    mxp_to_char( "You are ", ch, MXP_ALL );
+         if ( GET_AC(ch) >=  101 ) mxp_to_char( "WORSE than naked!\n\r", ch, MXP_ALL );
+    else if ( GET_AC(ch) >=   80 ) mxp_to_char( "naked.\n\r",            ch, MXP_ALL );
+    else if ( GET_AC(ch) >=   60 ) mxp_to_char( "wearing clothes.\n\r",  ch, MXP_ALL );
+    else if ( GET_AC(ch) >=   40 ) mxp_to_char( "slightly armored.\n\r", ch, MXP_ALL );
+    else if ( GET_AC(ch) >=   20 ) mxp_to_char( "somewhat armored.\n\r", ch, MXP_ALL );
+    else if ( GET_AC(ch) >=    0 ) mxp_to_char( "armored.\n\r",          ch, MXP_ALL );
+    else if ( GET_AC(ch) >= - 20 ) mxp_to_char( "well armored.\n\r",     ch, MXP_ALL );
+    else if ( GET_AC(ch) >= - 40 ) mxp_to_char( "strongly armored.\n\r", ch, MXP_ALL );
+    else if ( GET_AC(ch) >= - 60 ) mxp_to_char( "heavily armored.\n\r",  ch, MXP_ALL );
+    else if ( GET_AC(ch) >= - 80 ) mxp_to_char( "superbly armored.\n\r", ch, MXP_ALL );
+    else if ( GET_AC(ch) >= -100 ) mxp_to_char( "divinely armored.\n\r", ch, MXP_ALL );
+    else                           mxp_to_char( "invincible!\n\r",       ch, MXP_ALL );
 
     if ( ch->level >= 15 )
     {
 	sprintf( buf, "Hitroll: %d  Damroll: %d.\n\r",
 	    GET_HITROLL(ch), GET_DAMROLL(ch) );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
     
     if ( ch->level >= 10 )
     {
 	sprintf( buf, "Alignment: %d.  ", ch->alignment );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
-    send_to_char( "You are ", ch );
-         if ( ch->alignment >  900 ) send_to_char( "angelic.\n\r", ch );
-    else if ( ch->alignment >  700 ) send_to_char( "saintly.\n\r", ch );
-    else if ( ch->alignment >  350 ) send_to_char( "good.\n\r",    ch );
-    else if ( ch->alignment >  100 ) send_to_char( "kind.\n\r",    ch );
-    else if ( ch->alignment > -100 ) send_to_char( "neutral.\n\r", ch );
-    else if ( ch->alignment > -350 ) send_to_char( "mean.\n\r",    ch );
-    else if ( ch->alignment > -700 ) send_to_char( "evil.\n\r",    ch );
-    else if ( ch->alignment > -900 ) send_to_char( "demonic.\n\r", ch );
-    else                             send_to_char( "satanic.\n\r", ch );
+    mxp_to_char( "You are ", ch, MXP_ALL );
+         if ( ch->alignment >  900 ) mxp_to_char( "angelic.\n\r", ch, MXP_ALL );
+    else if ( ch->alignment >  700 ) mxp_to_char( "saintly.\n\r", ch, MXP_ALL );
+    else if ( ch->alignment >  350 ) mxp_to_char( "good.\n\r",    ch, MXP_ALL );
+    else if ( ch->alignment >  100 ) mxp_to_char( "kind.\n\r",    ch, MXP_ALL );
+    else if ( ch->alignment > -100 ) mxp_to_char( "neutral.\n\r", ch, MXP_ALL );
+    else if ( ch->alignment > -350 ) mxp_to_char( "mean.\n\r",    ch, MXP_ALL );
+    else if ( ch->alignment > -700 ) mxp_to_char( "evil.\n\r",    ch, MXP_ALL );
+    else if ( ch->alignment > -900 ) mxp_to_char( "demonic.\n\r", ch, MXP_ALL );
+    else                             mxp_to_char( "satanic.\n\r", ch, MXP_ALL );
     
     if ( ch->affected != NULL )
     {
-	send_to_char( "You are affected by:\n\r", ch );
+	mxp_to_char( "You are affected by:\n\r", ch, MXP_ALL );
 	for ( paf = ch->affected; paf != NULL; paf = paf->next )
 	{
 	    sprintf( buf, "Spell: '%s'", skill_table[paf->type].name );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 
 	    if ( ch->level >= 20 )
 	    {
@@ -866,10 +885,10 @@
 		    affect_loc_name( paf->location ),
 		    paf->modifier,
 		    paf->duration );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 	    }
 
-	    send_to_char( ".\n\r", ch );
+	    mxp_to_char( ".\n\r", ch, MXP_ALL );
 	}
     }
 
@@ -919,7 +938,7 @@
 	(char *) ctime( &current_time )
 	);
 
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -939,7 +958,7 @@
 
     if ( !IS_OUTSIDE(ch) )
     {
-	send_to_char( "You can't see the weather indoors.\n\r", ch );
+	mxp_to_char( "You can't see the weather indoors.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -949,7 +968,7 @@
 	? "a warm southerly breeze blows"
 	: "a cold northern gust blows"
 	);
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -971,22 +990,22 @@
 	{
 	    if ( pHelp->level >= 0 && str_cmp( argument, "imotd" ) )
 	    {
-		send_to_char( pHelp->keyword, ch );
-		send_to_char( "\n\r", ch );
+		mxp_to_char( pHelp->keyword, ch, MXP_ALL );
+		mxp_to_char( "\n\r", ch, MXP_ALL );
 	    }
 
 	    /*
 	     * Strip leading '.' to allow initial blanks.
 	     */
 	    if ( pHelp->text[0] == '.' )
-		send_to_char( pHelp->text+1, ch );
+		mxp_to_char( pHelp->text+1, ch, MXP_ALL );
 	    else
-		send_to_char( pHelp->text  , ch );
+		mxp_to_char( pHelp->text  , ch, MXP_ALL );
 	    return;
 	}
     }
 
-    send_to_char( "No help on that word.\n\r", ch );
+    mxp_to_char( "No help on that word.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1038,7 +1057,7 @@
 	    case 1: iLevelLower = atoi( arg ); break;
 	    case 2: iLevelUpper = atoi( arg ); break;
 	    default:
-		send_to_char( "Only two level numbers allowed.\n\r", ch );
+		mxp_to_char( "Only two level numbers allowed.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -1048,7 +1067,7 @@
 
 	    if ( strlen(arg) < 3 )
 	    {
-		send_to_char( "Classes must be longer than that.\n\r", ch );
+		mxp_to_char( "Classes must be longer than that.\n\r", ch, MXP_ALL );
 		return;
 	    }
 
@@ -1074,7 +1093,7 @@
 
 		if ( iClass == MAX_CLASS )
 		{
-		    send_to_char( "That's not a class.\n\r", ch );
+		    mxp_to_char( "That's not a class.\n\r", ch, MXP_ALL );
 		    return;
 		}
 	    }
@@ -1135,7 +1154,7 @@
     sprintf( buf2, "You see %d player%s in the game.\n\r",
 	    nMatch, nMatch == 1 ? "" : "s" );
     strcat( buf, buf2 );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -1143,7 +1162,7 @@
 
 void do_inventory( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "You are carrying:\n\r", ch );
+    mxp_to_char( "You are carrying:\n\r", ch, MXP_ALL );
     show_list_to_char( ch->carrying, ch, TRUE, TRUE );
     return;
 }
@@ -1156,28 +1175,28 @@
     int iWear;
     bool found;
 
-    send_to_char( "You are using:\n\r", ch );
+    mxp_to_char( "You are using:\n\r", ch, MXP_ALL );
     found = FALSE;
     for ( iWear = 0; iWear < MAX_WEAR; iWear++ )
     {
 	if ( ( obj = get_eq_char( ch, iWear ) ) == NULL )
 	    continue;
 
-	send_to_char( where_name[iWear], ch );
+	mxp_to_char( where_name[iWear], ch, MXP_ALL );
 	if ( can_see_obj( ch, obj ) )
 	{
-	    send_to_char( format_obj_to_char( obj, ch, TRUE ), ch );
-	    send_to_char( "\n\r", ch );
+	    mxp_to_char( format_obj_to_char( obj, ch, TRUE ), ch, MXP_ALL );
+	    mxp_to_char( "\n\r", ch, MXP_ALL );
 	}
 	else
 	{
-	    send_to_char( "something.\n\r", ch );
+	    mxp_to_char( "something.\n\r", ch, MXP_ALL );
 	}
 	found = TRUE;
     }
 
     if ( !found )
-	send_to_char( "Nothing.\n\r", ch );
+	mxp_to_char( "Nothing.\n\r", ch, MXP_ALL );
 
     return;
 }
@@ -1198,13 +1217,13 @@
     argument = one_argument( argument, arg2 );
     if ( arg1[0] == '\0' )
     {
-	send_to_char( "Compare what to what?\n\r", ch );
+	mxp_to_char( "Compare what to what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj1 = get_obj_carry( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "You do not have that item.\n\r", ch );
+	mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1221,7 +1240,7 @@
 
 	if ( obj2 == NULL )
 	{
-	    send_to_char( "You aren't wearing anything comparable.\n\r", ch );
+	    mxp_to_char( "You aren't wearing anything comparable.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1229,7 +1248,7 @@
     {
 	if ( ( obj2 = get_obj_carry( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "You do not have that item.\n\r", ch );
+	    mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1299,7 +1318,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Players near you:\n\r", ch );
+	mxp_to_char( "Players near you:\n\r", ch, MXP_ALL );
 	found = FALSE;
 	for ( d = descriptor_list; d; d = d->next )
 	{
@@ -1313,11 +1332,11 @@
 		found = TRUE;
 		sprintf( buf, "%-28s %s\n\r",
 		    victim->name, victim->in_room->name );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 	    }
 	}
 	if ( !found )
-	    send_to_char( "None\n\r", ch );
+	    mxp_to_char( "None\n\r", ch, MXP_ALL );
     }
     else
     {
@@ -1334,7 +1353,7 @@
 		found = TRUE;
 		sprintf( buf, "%-28s %s\n\r",
 		    PERS(victim, ch), victim->in_room->name );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 		break;
 	    }
 	}
@@ -1361,20 +1380,20 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Consider killing whom?\n\r", ch );
+	mxp_to_char( "Consider killing whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They're not here.\n\r", ch );
+	mxp_to_char( "They're not here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !IS_NPC( victim ) )
     {
-	send_to_char( "The gods do not accept this type of sacrafice.\n\r",
-		     ch );
+	mxp_to_char( "The gods do not accept this type of sacrafice.\n\r",
+		     ch, MXP_ALL );
 	return;
     }
 
@@ -1396,11 +1415,11 @@
     if ( ( ( diff >= 0) && ( hpdiff <= 0 ) )
 	|| ( ( diff <= 0 ) && ( hpdiff >= 0 ) ) )
     {
-        send_to_char( "Also,", ch );
+        mxp_to_char( "Also,", ch, MXP_ALL );
     }
     else
     {
-        send_to_char( "However,", ch );
+        mxp_to_char( "However,", ch, MXP_ALL );
     }
 
     if ( hpdiff >= 101 )
@@ -1460,7 +1479,7 @@
 
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Change your title to what?\n\r", ch );
+	mxp_to_char( "Change your title to what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1469,7 +1488,7 @@
 
     smash_tilde( argument );
     set_title( ch, argument );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 }
 
 
@@ -1493,7 +1512,7 @@
 
 	if ( strlen(buf) + strlen(argument) >= MAX_STRING_LENGTH - 2 )
 	{
-	    send_to_char( "Description too long.\n\r", ch );
+	    mxp_to_char( "Description too long.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1503,8 +1522,8 @@
 	ch->description = str_dup( buf );
     }
 
-    send_to_char( "Your description is:\n\r", ch );
-    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
+    mxp_to_char( "Your description is:\n\r", ch, MXP_ALL );
+    mxp_to_char( ch->description ? ch->description : "(None).\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1521,7 +1540,7 @@
 	ch->move, ch->max_move,
 	ch->exp   );
 
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "$n reports: %d/%d hp %d/%d mana %d/%d mv %d xp.",
 	ch->hit,  ch->max_hit,
@@ -1549,9 +1568,9 @@
 
     if ( ch->level < 3 )
     {
-	send_to_char(
+	mxp_to_char(
 	    "You must be third level to practice.  Go train instead!\n\r",
-	    ch );
+	    ch, MXP_ALL );
 	return;
     }
 
@@ -1580,7 +1599,7 @@
 	sprintf( buf, "You have %d practice sessions left.\n\r",
 	    ch->practice );
 	strcat( buf1, buf );
-	send_to_char( buf1, ch );
+	mxp_to_char( buf1, ch, MXP_ALL );
     }
     else
     {
@@ -1589,7 +1608,7 @@
 
 	if ( !IS_AWAKE(ch) )
 	{
-	    send_to_char( "In your dreams, or what?\n\r", ch );
+	    mxp_to_char( "In your dreams, or what?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1601,13 +1620,13 @@
 
 	if ( mob == NULL )
 	{
-	    send_to_char( "You can't do that here.\n\r", ch );
+	    mxp_to_char( "You can't do that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->practice <= 0 )
 	{
-	    send_to_char( "You have no practice sessions left.\n\r", ch );
+	    mxp_to_char( "You have no practice sessions left.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1615,7 +1634,7 @@
 	|| ( !IS_NPC(ch)
 	&&   ch->level < skill_table[sn].skill_level[ch->class] ) )
 	{
-	    send_to_char( "You can't practice that.\n\r", ch );
+	    mxp_to_char( "You can't practice that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1625,7 +1644,7 @@
 	{
 	    sprintf( buf, "You are already an adept of %s.\n\r",
 		skill_table[sn].name );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	}
 	else
 	{
@@ -1671,19 +1690,19 @@
 
     if ( wimpy < 0 )
     {
-	send_to_char( "Your courage exceeds your wisdom.\n\r", ch );
+	mxp_to_char( "Your courage exceeds your wisdom.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( wimpy > ch->max_hit )
     {
-	send_to_char( "Such cowardice ill becomes you.\n\r", ch );
+	mxp_to_char( "Such cowardice ill becomes you.\n\r", ch, MXP_ALL );
 	return;
     }
 
     ch->wimpy	= wimpy;
     sprintf( buf, "Wimpy set to %d hit points.\n\r", wimpy );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -1745,21 +1764,21 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' )
     {
-	send_to_char( "Syntax: password <old> <new>.\n\r", ch );
+	mxp_to_char( "Syntax: password <old> <new>.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
     {
 	WAIT_STATE( ch, 40 );
-	send_to_char( "Wrong password.  Wait 10 seconds.\n\r", ch );
+	mxp_to_char( "Wrong password.  Wait 10 seconds.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( strlen(arg2) < 5 )
     {
-	send_to_char(
-	    "New password must be at least five characters long.\n\r", ch );
+	mxp_to_char(
+	    "New password must be at least five characters long.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1771,8 +1790,8 @@
     {
 	if ( *p == '~' )
 	{
-	    send_to_char(
-		"New password not acceptable, try again.\n\r", ch );
+	    mxp_to_char(
+		"New password not acceptable, try again.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1780,7 +1799,7 @@
     free_string( ch->pcdata->pwd );
     ch->pcdata->pwd = str_dup( pwdnew );
     save_char_obj( ch );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1796,13 +1815,13 @@
     for ( iSocial = 0; social_table[iSocial].name[0] != '\0'; iSocial++ )
     {
 	sprintf( buf, "%-12s", social_table[iSocial].name );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	if ( ++col % 6 == 0 )
-	    send_to_char( "\n\r", ch );
+	    mxp_to_char( "\n\r", ch, MXP_ALL );
     }
  
     if ( col % 6 != 0 )
-	send_to_char( "\n\r", ch );
+	mxp_to_char( "\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1835,7 +1854,7 @@
     if ( col % 6 != 0 )
 	strcat( buf1, "\n\r" );
 
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -1851,58 +1870,58 @@
     {
 	if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) )
 	{
-	    send_to_char( "You are silenced.\n\r", ch );
+	    mxp_to_char( "You are silenced.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
-	send_to_char( "Channels:", ch );
+	mxp_to_char( "Channels:", ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_AUCTION)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_AUCTION)
 	    ? " +AUCTION"
 	    : " -auction",
-	    ch );
+	    ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
 	    ? " +CHAT"
 	    : " -chat",
-	    ch );
+	    ch, MXP_ALL );
 
 #if 0
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_HACKER)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_HACKER)
 	    ? " +HACKER"
 	    : " -hacker",
-	    ch );
+	    ch, MXP_ALL );
 #endif
 
 	if ( IS_HERO(ch) )
 	{
-	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
+	    mxp_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
 		? " +IMMTALK"
 		: " -immtalk",
-		ch );
+		ch, MXP_ALL );
 	}
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_MUSIC)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_MUSIC)
 	    ? " +MUSIC"
 	    : " -music",
-	    ch );
+	    ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_QUESTION)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_QUESTION)
 	    ? " +QUESTION"
 	    : " -question",
-	    ch );
+	    ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_SHOUT)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_SHOUT)
 	    ? " +SHOUT"
 	    : " -shout",
-	    ch );
+	    ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->deaf, CHANNEL_YELL)
+	mxp_to_char( !IS_SET(ch->deaf, CHANNEL_YELL)
 	    ? " +YELL"
 	    : " -yell",
-	    ch );
+	    ch, MXP_ALL );
 
-	send_to_char( ".\n\r", ch );
+	mxp_to_char( ".\n\r", ch, MXP_ALL );
     }
     else
     {
@@ -1913,7 +1932,7 @@
 	else if ( arg[0] == '-' ) fClear = FALSE;
 	else
 	{
-	    send_to_char( "Channels -channel or +channel?\n\r", ch );
+	    mxp_to_char( "Channels -channel or +channel?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1929,7 +1948,7 @@
 	else if ( !str_cmp( arg+1, "yell"     ) ) bit = CHANNEL_YELL;
 	else
 	{
-	    send_to_char( "Set or clear which channel?\n\r", ch );
+	    mxp_to_char( "Set or clear which channel?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1938,7 +1957,7 @@
 	else
 	    SET_BIT    (ch->deaf, bit);
 
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1960,62 +1979,62 @@
 
     if ( arg[0] == '\0' )
     {
-        send_to_char( "[ Keyword  ] Option\n\r", ch );
+        mxp_to_char( "[ Keyword  ] Option\n\r", ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_AUTOEXIT)
+	mxp_to_char(  IS_SET(ch->act, PLR_AUTOEXIT)
             ? "[+AUTOEXIT ] You automatically see exits.\n\r"
 	    : "[-autoexit ] You don't automatically see exits.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_AUTOLOOT)
+	mxp_to_char(  IS_SET(ch->act, PLR_AUTOLOOT)
 	    ? "[+AUTOLOOT ] You automatically loot corpses.\n\r"
 	    : "[-autoloot ] You don't automatically loot corpses.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_AUTOSAC)
+	mxp_to_char(  IS_SET(ch->act, PLR_AUTOSAC)
 	    ? "[+AUTOSAC  ] You automatically sacrifice corpses.\n\r"
 	    : "[-autosac  ] You don't automatically sacrifice corpses.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_BLANK)
+	mxp_to_char(  IS_SET(ch->act, PLR_BLANK)
 	    ? "[+BLANK    ] You have a blank line before your prompt.\n\r"
 	    : "[-blank    ] You have no blank line before your prompt.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
+	mxp_to_char(  IS_SET(ch->act, PLR_BRIEF)
 	    ? "[+BRIEF    ] You see brief descriptions.\n\r"
 	    : "[-brief    ] You see long descriptions.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
          
-	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
+	mxp_to_char(  IS_SET(ch->act, PLR_COMBINE)
 	    ? "[+COMBINE  ] You see object lists in combined format.\n\r"
 	    : "[-combine  ] You see object lists in single format.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
+	mxp_to_char(  IS_SET(ch->act, PLR_PROMPT)
 	    ? "[+PROMPT   ] You have a prompt.\n\r"
 	    : "[-prompt   ] You don't have a prompt.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
+	mxp_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
 	    ? "[+TELNETGA ] You receive a telnet GA sequence.\n\r"
 	    : "[-telnetga ] You don't receive a telnet GA sequence.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char(  IS_SET(ch->act, PLR_SILENCE)
+	mxp_to_char(  IS_SET(ch->act, PLR_SILENCE)
 	    ? "[+SILENCE  ] You are silenced.\n\r"
 	    : ""
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
+	mxp_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
 	    ? ""
 	    : "[-emote    ] You can't emote.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
 
-	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
+	mxp_to_char( !IS_SET(ch->act, PLR_NO_TELL)
 	    ? ""
 	    : "[-tell     ] You can't use 'tell'.\n\r"
-	    , ch );
+	    , ch, MXP_ALL );
     }
     else
     {
@@ -2026,7 +2045,7 @@
 	else if ( arg[0] == '-' ) fSet = FALSE;
 	else
 	{
-	    send_to_char( "Config -option or +option?\n\r", ch );
+	    mxp_to_char( "Config -option or +option?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2040,7 +2059,7 @@
 	else if ( !str_cmp( arg+1, "telnetga" ) ) bit = PLR_TELNET_GA;
 	else
 	{
-	    send_to_char( "Config which option?\n\r", ch );
+	    mxp_to_char( "Config which option?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2049,7 +2068,7 @@
 	else
 	    REMOVE_BIT (ch->act, bit);
 
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -2074,7 +2093,7 @@
 	   !class_table[ch->class].fMana )
     ||  IS_NPC ( ch ) )
     {  
-       send_to_char ( "You do not know how to cast spells!\n\r", ch );
+       mxp_to_char ( "You do not know how to cast spells!\n\r", ch, MXP_ALL );
        return;
     }
 
@@ -2099,7 +2118,7 @@
     if ( col % 3 != 0 )
       strcat( buf1, "\n\r" );
 
-    send_to_char ( buf1, ch );
+    mxp_to_char ( buf1, ch, MXP_ALL );
     return;
 
 }
@@ -2117,7 +2136,7 @@
 	   !class_table[ch->class].fMana )
     ||  IS_NPC ( ch ) )
     {  
-       send_to_char ( "You do not need any stinking spells!\n\r", ch );
+       mxp_to_char ( "You do not need any stinking spells!\n\r", ch, MXP_ALL );
        return;
     }
 
@@ -2162,7 +2181,7 @@
 
     }
 
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 
 }
@@ -2238,15 +2257,15 @@
 
     if ( lines < 1 )
     {
-	send_to_char(
+	mxp_to_char(
 		"Negative or Zero values for a page pause is not legal.\n\r",
-		     ch );
+		     ch, MXP_ALL );
 	return;
     }
 
     ch->pcdata->pagelen = lines;
     sprintf( buf, "Page pause set to %d lines.\n\r", lines );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -2278,7 +2297,7 @@
 
 
    ch->prompt = str_dup( buf );
-   send_to_char( "Ok.\n\r", ch );
+   mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
    return;
 } 
 
diff -u srcorig/act_move.c src/act_move.c
--- srcorig/act_move.c	2004-12-01 08:18:50.000000000 -0600
+++ src/act_move.c	2004-12-05 08:44:14.000000000 -0600
@@ -70,7 +70,7 @@
     if ( ( pexit   = in_room->exit[door] ) == NULL
     ||   ( to_room = pexit->to_room      ) == NULL )
     {
-	send_to_char( "Alas, you cannot go that way.\n\r", ch );
+	mxp_to_char( "Alas, you cannot go that way.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -85,13 +85,13 @@
     &&   ch->master != NULL
     &&   in_room == ch->master->in_room )
     {
-	send_to_char( "What?  And leave your beloved master?\n\r", ch );
+	mxp_to_char( "What?  And leave your beloved master?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( room_is_private( to_room ) )
     {
-	send_to_char( "That room is private right now.\n\r", ch );
+	mxp_to_char( "That room is private right now.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -105,7 +105,7 @@
 	    if ( iClass != ch->class
 	    &&   to_room->vnum == class_table[iClass].guild )
 	    {
-		send_to_char( "You aren't allowed in there.\n\r", ch );
+		mxp_to_char( "You aren't allowed in there.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -115,7 +115,7 @@
 	{
 	    if ( !IS_AFFECTED(ch, AFF_FLYING) )
 	    {
-		send_to_char( "You can't fly.\n\r", ch );
+		mxp_to_char( "You can't fly.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -147,7 +147,7 @@
 	    }
 	    if ( !found )
 	    {
-		send_to_char( "You need a boat to go there.\n\r", ch );
+		mxp_to_char( "You need a boat to go there.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -158,7 +158,7 @@
 
 	if ( ch->move < move )
 	{
-	    send_to_char( "You are too exhausted.\n\r", ch );
+	    mxp_to_char( "You are too exhausted.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -276,7 +276,7 @@
 
     if ( !IS_SET(pexit->exit_info, EX_ISDOOR) )
     {
-	send_to_char( "You can't do that.\n\r", ch );
+	mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	return -1;
     }
 
@@ -295,7 +295,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Open what?\n\r", ch );
+	mxp_to_char( "Open what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -303,16 +303,16 @@
     {
 	/* 'open object' */
 	if ( obj->item_type != ITEM_CONTAINER )
-	    { send_to_char( "That's not a container.\n\r", ch ); return; }
+	    { mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSED) )
-	    { send_to_char( "It's already open.\n\r",      ch ); return; }
+	    { mxp_to_char( "It's already open.\n\r",      ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSEABLE) )
-	    { send_to_char( "You can't do that.\n\r",      ch ); return; }
+	    { mxp_to_char( "You can't do that.\n\r",      ch, MXP_ALL ); return; }
 	if ( IS_SET(obj->value[1], CONT_LOCKED) )
-	    { send_to_char( "It's locked.\n\r",            ch ); return; }
+	    { mxp_to_char( "It's locked.\n\r",            ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(obj->value[1], CONT_CLOSED);
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	act( "$n opens $p.", ch, obj, NULL, TO_ROOM );
 	return;
     }
@@ -326,13 +326,13 @@
 
 	pexit = ch->in_room->exit[door];
 	if ( !IS_SET(pexit->exit_info, EX_CLOSED) )
-	    { send_to_char( "It's already open.\n\r",      ch ); return; }
+	    { mxp_to_char( "It's already open.\n\r",      ch, MXP_ALL ); return; }
 	if (  IS_SET(pexit->exit_info, EX_LOCKED) )
-	    { send_to_char( "It's locked.\n\r",            ch ); return; }
+	    { mxp_to_char( "It's locked.\n\r",            ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(pexit->exit_info, EX_CLOSED);
 	act( "$n opens the $d.", ch, NULL, pexit->keyword, TO_ROOM );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 
 	/* open the other side */
 	if ( ( to_room   = pexit->to_room               ) != NULL
@@ -362,7 +362,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Close what?\n\r", ch );
+	mxp_to_char( "Close what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -370,14 +370,14 @@
     {
 	/* 'close object' */
 	if ( obj->item_type != ITEM_CONTAINER )
-	    { send_to_char( "That's not a container.\n\r", ch ); return; }
+	    { mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL ); return; }
 	if ( IS_SET(obj->value[1], CONT_CLOSED) )
-	    { send_to_char( "It's already closed.\n\r",    ch ); return; }
+	    { mxp_to_char( "It's already closed.\n\r",    ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSEABLE) )
-	    { send_to_char( "You can't do that.\n\r",      ch ); return; }
+	    { mxp_to_char( "You can't do that.\n\r",      ch, MXP_ALL ); return; }
 
 	SET_BIT(obj->value[1], CONT_CLOSED);
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	act( "$n closes $p.", ch, obj, NULL, TO_ROOM );
 	return;
     }
@@ -391,11 +391,11 @@
 
 	pexit	= ch->in_room->exit[door];
 	if ( IS_SET(pexit->exit_info, EX_CLOSED) )
-	    { send_to_char( "It's already closed.\n\r",    ch ); return; }
+	    { mxp_to_char( "It's already closed.\n\r",    ch, MXP_ALL ); return; }
 
 	SET_BIT(pexit->exit_info, EX_CLOSED);
 	act( "$n closes the $d.", ch, NULL, pexit->keyword, TO_ROOM );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 
 	/* close the other side */
 	if ( ( to_room   = pexit->to_room               ) != NULL
@@ -440,7 +440,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Lock what?\n\r", ch );
+	mxp_to_char( "Lock what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -448,18 +448,18 @@
     {
 	/* 'lock object' */
 	if ( obj->item_type != ITEM_CONTAINER )
-	    { send_to_char( "That's not a container.\n\r", ch ); return; }
+	    { mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( obj->value[2] < 0 )
-	    { send_to_char( "It can't be locked.\n\r",     ch ); return; }
+	    { mxp_to_char( "It can't be locked.\n\r",     ch, MXP_ALL ); return; }
 	if ( !has_key( ch, obj->value[2] ) )
-	    { send_to_char( "You lack the key.\n\r",       ch ); return; }
+	    { mxp_to_char( "You lack the key.\n\r",       ch, MXP_ALL ); return; }
 	if ( IS_SET(obj->value[1], CONT_LOCKED) )
-	    { send_to_char( "It's already locked.\n\r",    ch ); return; }
+	    { mxp_to_char( "It's already locked.\n\r",    ch, MXP_ALL ); return; }
 
 	SET_BIT(obj->value[1], CONT_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n locks $p.", ch, obj, NULL, TO_ROOM );
 	return;
     }
@@ -473,16 +473,16 @@
 
 	pexit	= ch->in_room->exit[door];
 	if ( !IS_SET(pexit->exit_info, EX_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( pexit->key < 0 )
-	    { send_to_char( "It can't be locked.\n\r",     ch ); return; }
+	    { mxp_to_char( "It can't be locked.\n\r",     ch, MXP_ALL ); return; }
 	if ( !has_key( ch, pexit->key) )
-	    { send_to_char( "You lack the key.\n\r",       ch ); return; }
+	    { mxp_to_char( "You lack the key.\n\r",       ch, MXP_ALL ); return; }
 	if ( IS_SET(pexit->exit_info, EX_LOCKED) )
-	    { send_to_char( "It's already locked.\n\r",    ch ); return; }
+	    { mxp_to_char( "It's already locked.\n\r",    ch, MXP_ALL ); return; }
 
 	SET_BIT(pexit->exit_info, EX_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n locks the $d.", ch, NULL, pexit->keyword, TO_ROOM );
 
 	/* lock the other side */
@@ -509,7 +509,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Unlock what?\n\r", ch );
+	mxp_to_char( "Unlock what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -517,18 +517,18 @@
     {
 	/* 'unlock object' */
 	if ( obj->item_type != ITEM_CONTAINER )
-	    { send_to_char( "That's not a container.\n\r", ch ); return; }
+	    { mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( obj->value[2] < 0 )
-	    { send_to_char( "It can't be unlocked.\n\r",   ch ); return; }
+	    { mxp_to_char( "It can't be unlocked.\n\r",   ch, MXP_ALL ); return; }
 	if ( !has_key( ch, obj->value[2] ) )
-	    { send_to_char( "You lack the key.\n\r",       ch ); return; }
+	    { mxp_to_char( "You lack the key.\n\r",       ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_LOCKED) )
-	    { send_to_char( "It's already unlocked.\n\r",  ch ); return; }
+	    { mxp_to_char( "It's already unlocked.\n\r",  ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(obj->value[1], CONT_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n unlocks $p.", ch, obj, NULL, TO_ROOM );
 	return;
     }
@@ -542,16 +542,16 @@
 
 	pexit = ch->in_room->exit[door];
 	if ( !IS_SET(pexit->exit_info, EX_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( pexit->key < 0 )
-	    { send_to_char( "It can't be unlocked.\n\r",   ch ); return; }
+	    { mxp_to_char( "It can't be unlocked.\n\r",   ch, MXP_ALL ); return; }
 	if ( !has_key( ch, pexit->key) )
-	    { send_to_char( "You lack the key.\n\r",       ch ); return; }
+	    { mxp_to_char( "You lack the key.\n\r",       ch, MXP_ALL ); return; }
 	if ( !IS_SET(pexit->exit_info, EX_LOCKED) )
-	    { send_to_char( "It's already unlocked.\n\r",  ch ); return; }
+	    { mxp_to_char( "It's already unlocked.\n\r",  ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(pexit->exit_info, EX_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n unlocks the $d.", ch, NULL, pexit->keyword, TO_ROOM );
 
 	/* unlock the other side */
@@ -579,7 +579,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Pick what?\n\r", ch );
+	mxp_to_char( "Pick what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -598,7 +598,7 @@
 
     if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[gsn_pick_lock] )
     {
-	send_to_char( "You failed.\n\r", ch);
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -606,18 +606,18 @@
     {
 	/* 'pick object' */
 	if ( obj->item_type != ITEM_CONTAINER )
-	    { send_to_char( "That's not a container.\n\r", ch ); return; }
+	    { mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( obj->value[2] < 0 )
-	    { send_to_char( "It can't be unlocked.\n\r",   ch ); return; }
+	    { mxp_to_char( "It can't be unlocked.\n\r",   ch, MXP_ALL ); return; }
 	if ( !IS_SET(obj->value[1], CONT_LOCKED) )
-	    { send_to_char( "It's already unlocked.\n\r",  ch ); return; }
+	    { mxp_to_char( "It's already unlocked.\n\r",  ch, MXP_ALL ); return; }
 	if ( IS_SET(obj->value[1], CONT_PICKPROOF) )
-	    { send_to_char( "You failed.\n\r",             ch ); return; }
+	    { mxp_to_char( "You failed.\n\r",             ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(obj->value[1], CONT_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n picks $p.", ch, obj, NULL, TO_ROOM );
 	return;
     }
@@ -631,16 +631,16 @@
 
 	pexit = ch->in_room->exit[door];
 	if ( !IS_SET(pexit->exit_info, EX_CLOSED) )
-	    { send_to_char( "It's not closed.\n\r",        ch ); return; }
+	    { mxp_to_char( "It's not closed.\n\r",        ch, MXP_ALL ); return; }
 	if ( pexit->key < 0 )
-	    { send_to_char( "It can't be picked.\n\r",     ch ); return; }
+	    { mxp_to_char( "It can't be picked.\n\r",     ch, MXP_ALL ); return; }
 	if ( !IS_SET(pexit->exit_info, EX_LOCKED) )
-	    { send_to_char( "It's already unlocked.\n\r",  ch ); return; }
+	    { mxp_to_char( "It's already unlocked.\n\r",  ch, MXP_ALL ); return; }
 	if ( IS_SET(pexit->exit_info, EX_PICKPROOF) )
-	    { send_to_char( "You failed.\n\r",             ch ); return; }
+	    { mxp_to_char( "You failed.\n\r",             ch, MXP_ALL ); return; }
 
 	REMOVE_BIT(pexit->exit_info, EX_LOCKED);
-	send_to_char( "*Click*\n\r", ch );
+	mxp_to_char( "*Click*\n\r", ch, MXP_ALL );
 	act( "$n picks the $d.", ch, NULL, pexit->keyword, TO_ROOM );
 
 	/* pick the other side */
@@ -664,25 +664,25 @@
     {
     case POS_SLEEPING:
 	if ( IS_AFFECTED(ch, AFF_SLEEP) )
-	    { send_to_char( "You can't wake up!\n\r", ch ); return; }
+	    { mxp_to_char( "You can't wake up!\n\r", ch, MXP_ALL ); return; }
 
-	send_to_char( "You wake and stand up.\n\r", ch );
+	mxp_to_char( "You wake and stand up.\n\r", ch, MXP_ALL );
 	act( "$n wakes and stands up.", ch, NULL, NULL, TO_ROOM );
 	ch->position = POS_STANDING;
 	break;
 
     case POS_RESTING:
-	send_to_char( "You stand up.\n\r", ch );
+	mxp_to_char( "You stand up.\n\r", ch, MXP_ALL );
 	act( "$n stands up.", ch, NULL, NULL, TO_ROOM );
 	ch->position = POS_STANDING;
 	break;
 
     case POS_STANDING:
-	send_to_char( "You are already standing.\n\r", ch );
+	mxp_to_char( "You are already standing.\n\r", ch, MXP_ALL );
 	break;
 
     case POS_FIGHTING:
-	send_to_char( "You are already fighting!\n\r", ch );
+	mxp_to_char( "You are already fighting!\n\r", ch, MXP_ALL );
 	break;
     }
 
@@ -696,21 +696,21 @@
     switch ( ch->position )
     {
     case POS_SLEEPING:
-	send_to_char( "You are already sleeping.\n\r", ch );
+	mxp_to_char( "You are already sleeping.\n\r", ch, MXP_ALL );
 	break;
 
     case POS_RESTING:
-	send_to_char( "You are already resting.\n\r", ch );
+	mxp_to_char( "You are already resting.\n\r", ch, MXP_ALL );
 	break;
 
     case POS_STANDING:
-	send_to_char( "You rest.\n\r", ch );
+	mxp_to_char( "You rest.\n\r", ch, MXP_ALL );
 	act( "$n rests.", ch, NULL, NULL, TO_ROOM );
 	ch->position = POS_RESTING;
 	break;
 
     case POS_FIGHTING:
-	send_to_char( "You are already fighting!\n\r", ch );
+	mxp_to_char( "You are already fighting!\n\r", ch, MXP_ALL );
 	break;
     }
 
@@ -724,18 +724,18 @@
     switch ( ch->position )
     {
     case POS_SLEEPING:
-	send_to_char( "You are already sleeping.\n\r", ch );
+	mxp_to_char( "You are already sleeping.\n\r", ch, MXP_ALL );
 	break;
 
     case POS_RESTING:
     case POS_STANDING: 
-	send_to_char( "You sleep.\n\r", ch );
+	mxp_to_char( "You sleep.\n\r", ch, MXP_ALL );
 	act( "$n sleeps.", ch, NULL, NULL, TO_ROOM );
 	ch->position = POS_SLEEPING;
 	break;
 
     case POS_FIGHTING:
-	send_to_char( "You are already fighting!\n\r", ch );
+	mxp_to_char( "You are already fighting!\n\r", ch, MXP_ALL );
 	break;
     }
 
@@ -754,10 +754,10 @@
 	{ do_stand( ch, argument ); return; }
 
     if ( !IS_AWAKE(ch) )
-	{ send_to_char( "You are asleep yourself!\n\r",       ch ); return; }
+	{ mxp_to_char( "You are asleep yourself!\n\r",       ch, MXP_ALL ); return; }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
-	{ send_to_char( "They aren't here.\n\r",              ch ); return; }
+	{ mxp_to_char( "They aren't here.\n\r",              ch, MXP_ALL ); return; }
 
     if ( IS_AWAKE(victim) )
 	{ act( "$N is already awake.", ch, NULL, victim, TO_CHAR ); return; }
@@ -777,7 +777,7 @@
 {
     AFFECT_DATA af;
 
-    send_to_char( "You attempt to move silently.\n\r", ch );
+    mxp_to_char( "You attempt to move silently.\n\r", ch, MXP_ALL );
     affect_strip( ch, gsn_sneak );
 
     if ( IS_NPC(ch) || number_percent( ) < ch->pcdata->learned[gsn_sneak] )
@@ -797,7 +797,7 @@
 
 void do_hide( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "You attempt to hide.\n\r", ch );
+    mxp_to_char( "You attempt to hide.\n\r", ch, MXP_ALL );
 
     if ( IS_AFFECTED(ch, AFF_HIDE) )
 	REMOVE_BIT(ch->affected_by, AFF_HIDE);
@@ -821,7 +821,7 @@
     REMOVE_BIT   ( ch->affected_by, AFF_HIDE		);
     REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
     REMOVE_BIT   ( ch->affected_by, AFF_SNEAK		);
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -837,7 +837,7 @@
 
     if ( ( location = get_room_index( ROOM_VNUM_TEMPLE ) ) == NULL )
     {
-	send_to_char( "You are completely lost.\n\r", ch );
+	mxp_to_char( "You are completely lost.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -847,7 +847,7 @@
     if ( IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
     ||   IS_AFFECTED(ch, AFF_CURSE) )
     {
-	send_to_char( "God has forsaken you.\n\r", ch );
+	mxp_to_char( "God has forsaken you.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -861,14 +861,14 @@
 	    lose = (ch->desc != NULL) ? 50 : 100;
 	    gain_exp( ch, 0 - lose );
 	    sprintf( buf, "You failed!  You lose %d exps.\n\r", lose );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
 	lose = (ch->desc != NULL) ? 100 : 200;
 	gain_exp( ch, 0 - lose );
 	sprintf( buf, "You recall from combat!  You lose %d exps.\n\r", lose );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	stop_fighting( ch, TRUE );
     }
 
@@ -908,14 +908,14 @@
  
     if ( mob == NULL )
       {
-	send_to_char( "You can't do that here.\n\r", ch );
+	mxp_to_char( "You can't do that here.\n\r", ch, MXP_ALL );
 	return;
       }
  
     if ( argument[0] == '\0' )
       {
 	sprintf( buf, "You have %d practice sessions.\n\r", ch->practice );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	argument = "foo";
       }
  
@@ -989,7 +989,7 @@
 	if ( buf[strlen(buf)-1] != ':' )
 	  {
 	        strcat( buf, ".\n\r" );
-		    send_to_char( buf, ch );
+		    mxp_to_char( buf, ch, MXP_ALL );
 	      }
          return;
       }  
@@ -1001,7 +1001,7 @@
       
         if ( cost > ch->practice )
 	  {
-            send_to_char( "You don't have enough practices.\n\r", ch );
+            mxp_to_char( "You don't have enough practices.\n\r", ch, MXP_ALL );
             return;
 	  }
  
@@ -1017,7 +1017,7 @@
  
         if ( cost > ch->practice )
 	  {
-            send_to_char( "You don't have enough practices.\n\r", ch );
+            mxp_to_char( "You don't have enough practices.\n\r", ch, MXP_ALL );
             return;
 	  }
  
@@ -1035,7 +1035,7 @@
  
     if ( cost > ch->practice )
       {
-	send_to_char( "You don't have enough practices.\n\r", ch );
+	mxp_to_char( "You don't have enough practices.\n\r", ch, MXP_ALL );
 	return;
       }
  
diff -u srcorig/act_obj.c src/act_obj.c
--- srcorig/act_obj.c	2004-12-01 08:18:50.000000000 -0600
+++ src/act_obj.c	2004-12-06 07:10:06.000000000 -0600
@@ -47,7 +47,7 @@
 {
     if ( !CAN_WEAR(obj, ITEM_TAKE) )
     {
-	send_to_char( "You can't take that.\n\r", ch );
+	mxp_to_char( "You can't take that.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -108,7 +108,7 @@
     /* Get type. */
     if ( arg1[0] == '\0' )
     {
-	send_to_char( "Get what?\n\r", ch );
+	mxp_to_char( "Get what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -144,7 +144,7 @@
 	    if ( !found ) 
 	    {
 		if ( arg1[3] == '\0' )
-		    send_to_char( "I see nothing here.\n\r", ch );
+		    mxp_to_char( "I see nothing here.\n\r", ch, MXP_ALL );
 		else
 		    act( "I see no $T here.", ch, NULL, &arg1[4], TO_CHAR );
 	    }
@@ -155,7 +155,7 @@
 	/* 'get ... container' */
 	if ( !str_cmp( arg2, "all" ) || !str_prefix( "all.", arg2 ) )
 	{
-	    send_to_char( "You can't do that.\n\r", ch );
+	    mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -168,7 +168,7 @@
 	switch ( container->item_type )
 	{
 	default:
-	    send_to_char( "That's not a container.\n\r", ch );
+	    mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL );
 	    return;
 
 	case ITEM_CONTAINER:
@@ -183,7 +183,7 @@
 
 		if ( IS_NPC(ch) )
 		{
-		    send_to_char( "You can't do that.\n\r", ch );
+		    mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 		    return;
 		}
 
@@ -210,7 +210,7 @@
 
 		    if ( !fGroup )
 		    {
-			send_to_char( "You can't do that.\n\r", ch );
+			mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 			return;
 		    }
 		}
@@ -280,13 +280,13 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' )
     {
-	send_to_char( "Put what in what?\n\r", ch );
+	mxp_to_char( "Put what in what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !str_cmp( arg2, "all" ) || !str_prefix( "all.", arg2 ) )
     {
-	send_to_char( "You can't do that.\n\r", ch );
+	mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -298,7 +298,7 @@
 
     if ( container->item_type != ITEM_CONTAINER )
     {
-	send_to_char( "That's not a container.\n\r", ch );
+	mxp_to_char( "That's not a container.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -313,26 +313,26 @@
 	/* 'put obj container' */
 	if ( ( obj = get_obj_carry( ch, arg1 ) ) == NULL )
 	{
-	    send_to_char( "You do not have that item.\n\r", ch );
+	    mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( obj == container )
 	{
-	    send_to_char( "You can't fold it into itself.\n\r", ch );
+	    mxp_to_char( "You can't fold it into itself.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !can_drop_obj( ch, obj ) )
 	{
-	    send_to_char( "You can't let go of it.\n\r", ch );
+	    mxp_to_char( "You can't let go of it.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( get_obj_weight( obj ) + get_obj_weight( container )
 	     > container->value[0] )
 	{
-	    send_to_char( "It won't fit.\n\r", ch );
+	    mxp_to_char( "It won't fit.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -380,7 +380,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Drop what?\n\r", ch );
+	mxp_to_char( "Drop what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -394,13 +394,13 @@
 	if ( amount <= 0
 	|| ( str_cmp( arg, "coins" ) && str_cmp( arg, "coin" ) ) )
 	{
-	    send_to_char( "Sorry, you can't do that.\n\r", ch );
+	    mxp_to_char( "Sorry, you can't do that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->gold < amount )
 	{
-	    send_to_char( "You haven't got that many coins.\n\r", ch );
+	    mxp_to_char( "You haven't got that many coins.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -426,7 +426,7 @@
 
 	obj_to_room( create_money( amount ), ch->in_room );
 	act( "$n drops some gold.", ch, NULL, NULL, TO_ROOM );
-	send_to_char( "OK.\n\r", ch );
+	mxp_to_char( "OK.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -435,13 +435,13 @@
 	/* 'drop obj' */
 	if ( ( obj = get_obj_carry( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "You do not have that item.\n\r", ch );
+	    mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !can_drop_obj( ch, obj ) )
 	{
-	    send_to_char( "You can't let go of it.\n\r", ch );
+	    mxp_to_char( "You can't let go of it.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -499,7 +499,7 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' )
     {
-	send_to_char( "Give what to whom?\n\r", ch );
+	mxp_to_char( "Give what to whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -512,26 +512,26 @@
 	if ( amount <= 0
 	|| ( str_cmp( arg2, "coins" ) && str_cmp( arg2, "coin" ) ) )
 	{
-	    send_to_char( "Sorry, you can't do that.\n\r", ch );
+	    mxp_to_char( "Sorry, you can't do that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	argument = one_argument( argument, arg2 );
 	if ( arg2[0] == '\0' )
 	{
-	    send_to_char( "Give what to whom?\n\r", ch );
+	    mxp_to_char( "Give what to whom?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ( victim = get_char_room( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "They aren't here.\n\r", ch );
+	    mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->gold < amount )
 	{
-	    send_to_char( "You haven't got that much gold.\n\r", ch );
+	    mxp_to_char( "You haven't got that much gold.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -540,32 +540,32 @@
 	act( "$n gives you some gold.", ch, NULL, victim, TO_VICT    );
 	act( "$n gives $N some gold.",  ch, NULL, victim, TO_NOTVICT );
 	act( "You give $N some gold.",  ch, NULL, victim, TO_CHAR    );
-	send_to_char( "OK.\n\r", ch );
+	mxp_to_char( "OK.\n\r", ch, MXP_ALL );
 	mprog_bribe_trigger(victim,ch,amount);
 	return;
     }
 
     if ( ( obj = get_obj_carry( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "You do not have that item.\n\r", ch );
+	mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->wear_loc != WEAR_NONE )
     {
-	send_to_char( "You must remove it first.\n\r", ch );
+	mxp_to_char( "You must remove it first.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg2 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !can_drop_obj( ch, obj ) )
     {
-	send_to_char( "You can't let go of it.\n\r", ch );
+	mxp_to_char( "You can't let go of it.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -611,13 +611,13 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Fill what?\n\r", ch );
+	mxp_to_char( "Fill what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_obj_carry( ch, arg ) ) == NULL )
     {
-	send_to_char( "You do not have that item.\n\r", ch );
+	mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -634,25 +634,25 @@
 
     if ( !found )
     {
-	send_to_char( "There is no fountain here!\n\r", ch );
+	mxp_to_char( "There is no fountain here!\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->item_type != ITEM_DRINK_CON )
     {
-	send_to_char( "You can't fill that.\n\r", ch );
+	mxp_to_char( "You can't fill that.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->value[1] != 0 && obj->value[2] != 0 )
     {
-	send_to_char( "There is already another liquid in it.\n\r", ch );
+	mxp_to_char( "There is already another liquid in it.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->value[1] >= obj->value[0] )
     {
-	send_to_char( "Your container is full.\n\r", ch );
+	mxp_to_char( "Your container is full.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -683,7 +683,7 @@
 
 	if ( obj == NULL )
 	{
-	    send_to_char( "Drink what?\n\r", ch );
+	    mxp_to_char( "Drink what?\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -691,34 +691,34 @@
     {
 	if ( ( obj = get_obj_here( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "You can't find it.\n\r", ch );
+	    mxp_to_char( "You can't find it.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
 
     if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10 )
     {
-	send_to_char( "You fail to reach your mouth.  *Hic*\n\r", ch );
+	mxp_to_char( "You fail to reach your mouth.  *Hic*\n\r", ch, MXP_ALL );
 	return;
     }
 
     switch ( obj->item_type )
     {
     default:
-	send_to_char( "You can't drink from that.\n\r", ch );
+	mxp_to_char( "You can't drink from that.\n\r", ch, MXP_ALL );
 	break;
 
     case ITEM_FOUNTAIN:
 	if ( !IS_NPC(ch) )
 	    ch->pcdata->condition[COND_THIRST] = 48;
 	act( "$n drinks from the fountain.", ch, NULL, NULL, TO_ROOM );
-	send_to_char( "You are not thirsty.\n\r", ch );
+	mxp_to_char( "You are not thirsty.\n\r", ch, MXP_ALL );
 	break;
 
     case ITEM_DRINK_CON:
 	if ( obj->value[1] <= 0 )
 	{
-	    send_to_char( "It is already empty.\n\r", ch );
+	    mxp_to_char( "It is already empty.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -744,11 +744,11 @@
 	    amount * liq_table[liquid].liq_affect[COND_THIRST ] );
 
 	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
-	    send_to_char( "You feel drunk.\n\r", ch );
+	    mxp_to_char( "You feel drunk.\n\r", ch, MXP_ALL );
 	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
-	    send_to_char( "You are full.\n\r", ch );
+	    mxp_to_char( "You are full.\n\r", ch, MXP_ALL );
 	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
-	    send_to_char( "You do not feel thirsty.\n\r", ch );
+	    mxp_to_char( "You do not feel thirsty.\n\r", ch, MXP_ALL );
 	
 	if ( obj->value[3] != 0 )
 	{
@@ -756,7 +756,7 @@
 	    AFFECT_DATA af;
 
 	    act( "$n chokes and gags.", ch, NULL, NULL, TO_ROOM );
-	    send_to_char( "You choke and gag.\n\r", ch );
+	    mxp_to_char( "You choke and gag.\n\r", ch, MXP_ALL );
 	    af.type      = gsn_poison;
 	    af.duration  = 3 * amount;
 	    af.location  = APPLY_NONE;
@@ -768,7 +768,7 @@
 	obj->value[1] -= amount;
 	if ( obj->value[1] <= 0 )
 	{
-	    send_to_char( "The empty container vanishes.\n\r", ch );
+	    mxp_to_char( "The empty container vanishes.\n\r", ch, MXP_ALL );
 	    extract_obj( obj );
 	}
 	break;
@@ -787,13 +787,13 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Eat what?\n\r", ch );
+	mxp_to_char( "Eat what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_obj_carry( ch, arg ) ) == NULL )
     {
-	send_to_char( "You do not have that item.\n\r", ch );
+	mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -801,13 +801,13 @@
     {
 	if ( obj->item_type != ITEM_FOOD && obj->item_type != ITEM_PILL )
 	{
-	    send_to_char( "That's not edible.\n\r", ch );
+	    mxp_to_char( "That's not edible.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
 	{   
-	    send_to_char( "You are too full to eat more.\n\r", ch );
+	    mxp_to_char( "You are too full to eat more.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -826,9 +826,9 @@
 	    condition = ch->pcdata->condition[COND_FULL];
 	    gain_condition( ch, COND_FULL, obj->value[0] );
 	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
-		send_to_char( "You are no longer hungry.\n\r", ch );
+		mxp_to_char( "You are no longer hungry.\n\r", ch, MXP_ALL );
 	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
-		send_to_char( "You are full.\n\r", ch );
+		mxp_to_char( "You are full.\n\r", ch, MXP_ALL );
 	}
 
 	if ( obj->value[3] != 0 )
@@ -837,7 +837,7 @@
 	    AFFECT_DATA af;
 
 	    act( "$n chokes and gags.", ch, 0, 0, TO_ROOM );
-	    send_to_char( "You choke and gag.\n\r", ch );
+	    mxp_to_char( "You choke and gag.\n\r", ch, MXP_ALL );
 
 	    af.type      = gsn_poison;
 	    af.duration  = 2 * obj->value[0];
@@ -901,7 +901,7 @@
     {
 	sprintf( buf, "You must be level %d to use this object.\n\r",
 	    obj->level );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	act( "$n tries to use $p, but is too inexperienced.",
 	    ch, obj, NULL, TO_ROOM );
 	return;
@@ -942,7 +942,7 @@
 	}
 
 	bug( "Wear_obj: no free finger.", 0 );
-	send_to_char( "You already wear two rings.\n\r", ch );
+	mxp_to_char( "You already wear two rings.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -971,7 +971,7 @@
 	}
 
 	bug( "Wear_obj: no free neck.", 0 );
-	send_to_char( "You already wear two neck items.\n\r", ch );
+	mxp_to_char( "You already wear two neck items.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1084,7 +1084,7 @@
 	}
 
 	bug( "Wear_obj: no free wrist.", 0 );
-	send_to_char( "You already wear two wrist items.\n\r", ch );
+	mxp_to_char( "You already wear two wrist items.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1105,7 +1105,7 @@
 
 	if ( get_obj_weight( obj ) > str_app[get_curr_str(ch)].wield )
 	{
-	    send_to_char( "It is too heavy for you to wield.\n\r", ch );
+	    mxp_to_char( "It is too heavy for you to wield.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1126,7 +1126,7 @@
     }
 
     if ( fReplace )
-	send_to_char( "You can't wear, wield, or hold that.\n\r", ch );
+	mxp_to_char( "You can't wear, wield, or hold that.\n\r", ch, MXP_ALL );
 
     return;
 }
@@ -1142,7 +1142,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Wear, wield, or hold what?\n\r", ch );
+	mxp_to_char( "Wear, wield, or hold what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1162,7 +1162,7 @@
     {
 	if ( ( obj = get_obj_carry( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "You do not have that item.\n\r", ch );
+	    mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1184,7 +1184,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Remove what?\n\r", ch );
+	mxp_to_char( "Remove what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1201,7 +1201,7 @@
 
       if ( ( obj = get_obj_wear( ch, arg ) ) == NULL )
          {
-	  send_to_char( "You do not have that item.\n\r", ch );
+	  mxp_to_char( "You do not have that item.\n\r", ch, MXP_ALL );
      	  return;
          }
 
@@ -1223,15 +1223,15 @@
     {
 	act( "$n offers $mself to God, who graciously declines.",
 	    ch, NULL, NULL, TO_ROOM );
-	send_to_char(
-	    "God appreciates your offer and may accept it later.", ch );
+	mxp_to_char(
+	    "God appreciates your offer and may accept it later.", ch, MXP_ALL );
 	return;
     }
 
     obj = get_obj_list( ch, arg, ch->in_room->contents );
     if ( obj == NULL )
     {
-	send_to_char( "You can't find it.\n\r", ch );
+	mxp_to_char( "You can't find it.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1241,7 +1241,7 @@
 	return;
     }
 
-    send_to_char( "God gives you one gold coin for your sacrifice.\n\r", ch );
+    mxp_to_char( "God gives you one gold coin for your sacrifice.\n\r", ch, MXP_ALL );
     ch->gold += 1;
 
     act( "$n sacrifices $p to God.", ch, obj, NULL, TO_ROOM );
@@ -1260,19 +1260,19 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Quaff what?\n\r", ch );
+	mxp_to_char( "Quaff what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_obj_carry( ch, arg ) ) == NULL )
     {
-	send_to_char( "You do not have that potion.\n\r", ch );
+	mxp_to_char( "You do not have that potion.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->item_type != ITEM_POTION )
     {
-	send_to_char( "You can quaff only potions.\n\r", ch );
+	mxp_to_char( "You can quaff only potions.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1302,13 +1302,13 @@
 
     if ( ( scroll = get_obj_carry( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "You do not have that scroll.\n\r", ch );
+	mxp_to_char( "You do not have that scroll.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( scroll->item_type != ITEM_SCROLL )
     {
-	send_to_char( "You can recite only scrolls.\n\r", ch );
+	mxp_to_char( "You can recite only scrolls.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1322,7 +1322,7 @@
 	if ( ( victim = get_char_room ( ch, arg2 ) ) == NULL
 	&&   ( obj    = get_obj_here  ( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "You can't find it.\n\r", ch );
+	    mxp_to_char( "You can't find it.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1349,13 +1349,13 @@
 
     if ( ( staff = get_eq_char( ch, WEAR_HOLD ) ) == NULL )
     {
-	send_to_char( "You hold nothing in your hand.\n\r", ch );
+	mxp_to_char( "You hold nothing in your hand.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( staff->item_type != ITEM_STAFF )
     {
-	send_to_char( "You can brandish only with a staff.\n\r", ch );
+	mxp_to_char( "You can brandish only with a staff.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1430,19 +1430,19 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' && ch->fighting == NULL )
     {
-	send_to_char( "Zap whom or what?\n\r", ch );
+	mxp_to_char( "Zap whom or what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( wand = get_eq_char( ch, WEAR_HOLD ) ) == NULL )
     {
-	send_to_char( "You hold nothing in your hand.\n\r", ch );
+	mxp_to_char( "You hold nothing in your hand.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( wand->item_type != ITEM_WAND )
     {
-	send_to_char( "You can zap only with a wand.\n\r", ch );
+	mxp_to_char( "You can zap only with a wand.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1455,7 +1455,7 @@
 	}
 	else
 	{
-	    send_to_char( "Zap whom or what?\n\r", ch );
+	    mxp_to_char( "Zap whom or what?\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1464,7 +1464,7 @@
 	if ( ( victim = get_char_room ( ch, arg ) ) == NULL
 	&&   ( obj    = get_obj_here  ( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "You can't find it.\n\r", ch );
+	    mxp_to_char( "You can't find it.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1513,19 +1513,19 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' )
     {
-	send_to_char( "Steal what from whom?\n\r", ch );
+	mxp_to_char( "Steal what from whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg2 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "That's pointless.\n\r", ch );
+	mxp_to_char( "That's pointless.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1540,7 +1540,7 @@
 	/*
 	 * Failure.
 	 */
-	send_to_char( "Oops.\n\r", ch );
+	mxp_to_char( "Oops.\n\r", ch, MXP_ALL );
 	act( "$n tried to steal from you.\n\r", ch, NULL, victim, TO_VICT    );
 	act( "$n tried to steal from $N.\n\r",  ch, NULL, victim, TO_NOTVICT );
 	sprintf( buf, "%s is a bloody thief!", ch->name );
@@ -1557,7 +1557,7 @@
 		if ( !IS_SET(ch->act, PLR_THIEF) )
 		{
 		    SET_BIT(ch->act, PLR_THIEF);
-		    send_to_char( "*** You are now a THIEF!! ***\n\r", ch );
+		    mxp_to_char( "*** You are now a THIEF!! ***\n\r", ch, MXP_ALL );
 		    save_char_obj( ch );
 		}
 	    }
@@ -1575,20 +1575,20 @@
 	amount = victim->gold * number_range(1, 10) / 100;
 	if ( amount <= 0 )
 	{
-	    send_to_char( "You couldn't get any gold.\n\r", ch );
+	    mxp_to_char( "You couldn't get any gold.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	ch->gold     += amount;
 	victim->gold -= amount;
 	sprintf( buf, "Bingo!  You got %d gold coins.\n\r", amount );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_obj_carry( victim, arg1 ) ) == NULL )
     {
-	send_to_char( "You can't find it.\n\r", ch );
+	mxp_to_char( "You can't find it.\n\r", ch, MXP_ALL );
 	return;
     }
 	
@@ -1596,25 +1596,25 @@
     ||   IS_SET(obj->extra_flags, ITEM_INVENTORY)
     ||   obj->level > ch->level )
     {
-	send_to_char( "You can't pry it away.\n\r", ch );
+	mxp_to_char( "You can't pry it away.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->carry_number + get_obj_number( obj ) > can_carry_n( ch ) )
     {
-	send_to_char( "You have your hands full.\n\r", ch );
+	mxp_to_char( "You have your hands full.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
     {
-	send_to_char( "You can't carry that much weight.\n\r", ch );
+	mxp_to_char( "You can't carry that much weight.\n\r", ch, MXP_ALL );
 	return;
     }
 
     obj_from_char( obj );
     obj_to_char( obj, ch );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1638,7 +1638,7 @@
 
     if ( pShop == NULL )
     {
-	send_to_char( "You can't do that here.\n\r", ch );
+	mxp_to_char( "You can't do that here.\n\r", ch, MXP_ALL );
 	return NULL;
     }
 
@@ -1740,7 +1740,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Buy what?\n\r", ch );
+	mxp_to_char( "Buy what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1758,7 +1758,7 @@
 	if ( pRoomIndexNext == NULL )
 	{
 	    bug( "Do_buy: bad pet shop at vnum %d.", ch->in_room->vnum );
-	    send_to_char( "Sorry, you can't buy that here.\n\r", ch );
+	    mxp_to_char( "Sorry, you can't buy that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1769,25 +1769,25 @@
 
 	if ( pet == NULL || !IS_SET(pet->act, ACT_PET) )
 	{
-	    send_to_char( "Sorry, you can't buy that here.\n\r", ch );
+	    mxp_to_char( "Sorry, you can't buy that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( IS_SET(ch->act, PLR_BOUGHT_PET) )
 	{
-	    send_to_char( "You already bought one pet this level.\n\r", ch );
+	    mxp_to_char( "You already bought one pet this level.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->gold < 10 * pet->level * pet->level )
 	{
-	    send_to_char( "You can't afford it.\n\r", ch );
+	    mxp_to_char( "You can't afford it.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->level < pet->level )
 	{
-	    send_to_char( "You're not ready for this pet.\n\r", ch );
+	    mxp_to_char( "You're not ready for this pet.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1812,7 +1812,7 @@
 
 	char_to_room( pet, ch->in_room );
 	add_follower( pet, ch );
-	send_to_char( "Enjoy your pet.\n\r", ch );
+	mxp_to_char( "Enjoy your pet.\n\r", ch, MXP_ALL );
 	act( "$n bought $N as a pet.", ch, NULL, pet, TO_ROOM );
 	return;
     }
@@ -1854,13 +1854,13 @@
 
 	if ( ch->carry_number + get_obj_number( obj ) > can_carry_n( ch ) )
 	{
-	    send_to_char( "You can't carry that many items.\n\r", ch );
+	    mxp_to_char( "You can't carry that many items.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
 	{
-	    send_to_char( "You can't carry that much weight.\n\r", ch );
+	    mxp_to_char( "You can't carry that much weight.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1898,7 +1898,7 @@
 	if ( pRoomIndexNext == NULL )
 	{
 	    bug( "Do_list: bad pet shop at vnum %d.", ch->in_room->vnum );
-	    send_to_char( "You can't do that here.\n\r", ch );
+	    mxp_to_char( "You can't do that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -1920,9 +1920,9 @@
 	    }
 	}
 	if ( !found )
-	    send_to_char( "Sorry, we're out of pets right now.\n\r", ch );
+	    mxp_to_char( "Sorry, we're out of pets right now.\n\r", ch, MXP_ALL );
 
-	send_to_char( buf1, ch );
+	mxp_to_char( buf1, ch, MXP_ALL );
 	return;
     }
     else
@@ -1961,13 +1961,13 @@
 	if ( !found )
 	{
 	    if ( arg[0] == '\0' )
-		send_to_char( "You can't buy anything here.\n\r", ch );
+		mxp_to_char( "You can't buy anything here.\n\r", ch, MXP_ALL );
 	    else
-		send_to_char( "You can't buy that here.\n\r", ch );
+		mxp_to_char( "You can't buy that here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
-	send_to_char( buf1, ch );
+	mxp_to_char( buf1, ch, MXP_ALL );
 	return;
     }
 }
@@ -1986,7 +1986,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Sell what?\n\r", ch );
+	mxp_to_char( "Sell what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2003,7 +2003,7 @@
 
     if ( !can_drop_obj( ch, obj ) )
     {
-	send_to_char( "You can't let go of it.\n\r", ch );
+	mxp_to_char( "You can't let go of it.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2049,7 +2049,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Value what?\n\r", ch );
+	mxp_to_char( "Value what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2066,7 +2066,7 @@
 
     if ( !can_drop_obj( ch, obj ) )
     {
-	send_to_char( "You can't let go of it.\n\r", ch );
+	mxp_to_char( "You can't let go of it.\n\r", ch, MXP_ALL );
 	return;
     }
 
diff -u srcorig/act_wiz.c src/act_wiz.c
--- srcorig/act_wiz.c	2004-12-01 08:18:50.000000000 -0600
+++ src/act_wiz.c	2004-12-06 07:30:01.000000000 -0600
@@ -50,7 +50,7 @@
  
     if ( col % 6 != 0 )
 	strcat( buf1, "\n\r" );
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -63,7 +63,7 @@
 	smash_tilde( argument );
 	free_string( ch->pcdata->bamfin );
 	ch->pcdata->bamfin = str_dup( argument );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
     return;
 }
@@ -77,7 +77,7 @@
 	smash_tilde( argument );
 	free_string( ch->pcdata->bamfout );
 	ch->pcdata->bamfout = str_dup( argument );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
     return;
 }
@@ -92,31 +92,31 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Deny whom?\n\r", ch );
+	mxp_to_char( "Deny whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
     SET_BIT(victim->act, PLR_DENY);
-    send_to_char( "You are denied access!\n\r", victim );
-    send_to_char( "OK.\n\r", ch );
+    mxp_to_char( "You are denied access!\n\r", victim, MXP_ALL );
+    mxp_to_char( "OK.\n\r", ch, MXP_ALL );
     do_quit( victim, "" );
 
     return;
@@ -133,13 +133,13 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Disconnect whom?\n\r", ch );
+	mxp_to_char( "Disconnect whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -154,13 +154,13 @@
 	if ( d == victim->desc )
 	{
 	    close_socket( d );
-	    send_to_char( "Ok.\n\r", ch );
+	    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
 
     bug( "Do_disconnect: desc not found.", 0 );
-    send_to_char( "Descriptor not found!\n\r", ch );
+    mxp_to_char( "Descriptor not found!\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -177,19 +177,19 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' )
     {
-	send_to_char( "Syntax: pardon <character> <killer|thief>.\n\r", ch );
+	mxp_to_char( "Syntax: pardon <character> <killer|thief>.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -198,8 +198,8 @@
 	if ( IS_SET(victim->act, PLR_KILLER) )
 	{
 	    REMOVE_BIT( victim->act, PLR_KILLER );
-	    send_to_char( "Killer flag removed.\n\r", ch );
-	    send_to_char( "You are no longer a KILLER.\n\r", victim );
+	    mxp_to_char( "Killer flag removed.\n\r", ch, MXP_ALL );
+	    mxp_to_char( "You are no longer a KILLER.\n\r", victim, MXP_ALL );
 	}
 	return;
     }
@@ -209,13 +209,13 @@
 	if ( IS_SET(victim->act, PLR_THIEF) )
 	{
 	    REMOVE_BIT( victim->act, PLR_THIEF );
-	    send_to_char( "Thief flag removed.\n\r", ch );
-	    send_to_char( "You are no longer a THIEF.\n\r", victim );
+	    mxp_to_char( "Thief flag removed.\n\r", ch, MXP_ALL );
+	    mxp_to_char( "You are no longer a THIEF.\n\r", victim, MXP_ALL );
 	}
 	return;
     }
 
-    send_to_char( "Syntax: pardon <character> <killer|thief>.\n\r", ch );
+    mxp_to_char( "Syntax: pardon <character> <killer|thief>.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -227,7 +227,7 @@
     
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Echo what?\n\r", ch );
+	mxp_to_char( "Echo what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -235,8 +235,8 @@
     {
 	if ( d->connected == CON_PLAYING )
 	{
-	    send_to_char( argument, d->character );
-	    send_to_char( "\n\r",   d->character );
+	    mxp_to_char( argument, d->character, MXP_ALL );
+	    mxp_to_char( "\n\r",   d->character, MXP_ALL );
 	}
     }
 
@@ -251,7 +251,7 @@
     
     if ( argument[0] == '\0' )
     {
-	send_to_char( "Recho what?\n\r", ch );
+	mxp_to_char( "Recho what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -260,8 +260,8 @@
 	if ( d->connected == CON_PLAYING
 	&&   d->character->in_room == ch->in_room )
 	{
-	    send_to_char( argument, d->character );
-	    send_to_char( "\n\r",   d->character );
+	    mxp_to_char( argument, d->character, MXP_ALL );
+	    mxp_to_char( "\n\r",   d->character, MXP_ALL );
 	}
     }
 
@@ -302,7 +302,7 @@
 
     if ( arg1[0] == '\0' )
     {
-	send_to_char( "Transfer whom (and where)?\n\r", ch );
+	mxp_to_char( "Transfer whom (and where)?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -334,26 +334,26 @@
     {
 	if ( ( location = find_location( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "No such location.\n\r", ch );
+	    mxp_to_char( "No such location.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( room_is_private( location ) )
 	{
-	    send_to_char( "That room is private right now.\n\r", ch );
+	    mxp_to_char( "That room is private right now.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
 
     if ( ( victim = get_char_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim->in_room == NULL )
     {
-	send_to_char( "They are in limbo.\n\r", ch );
+	mxp_to_char( "They are in limbo.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -366,7 +366,7 @@
     if ( ch != victim )
 	act( "$n has transferred you.", ch, NULL, victim, TO_VICT );
     do_look( victim, "auto" );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 }
 
 
@@ -382,19 +382,19 @@
 
     if ( arg[0] == '\0' || argument[0] == '\0' )
     {
-	send_to_char( "At where what?\n\r", ch );
+	mxp_to_char( "At where what?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( location = find_location( ch, arg ) ) == NULL )
     {
-	send_to_char( "No such location.\n\r", ch );
+	mxp_to_char( "No such location.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( room_is_private( location ) )
     {
-	send_to_char( "That room is private right now.\n\r", ch );
+	mxp_to_char( "That room is private right now.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -430,19 +430,19 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Goto where?\n\r", ch );
+	mxp_to_char( "Goto where?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( location = find_location( ch, arg ) ) == NULL )
     {
-	send_to_char( "No such location.\n\r", ch );
+	mxp_to_char( "No such location.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( room_is_private( location ) )
     {
-	send_to_char( "That room is private right now.\n\r", ch );
+	mxp_to_char( "That room is private right now.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -485,13 +485,13 @@
     location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
     if ( location == NULL )
     {
-	send_to_char( "No such location.\n\r", ch );
+	mxp_to_char( "No such location.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->in_room != location && room_is_private( location ) )
     {
-	send_to_char( "That room is private right now.\n\r", ch );
+	mxp_to_char( "That room is private right now.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -566,7 +566,7 @@
 	}
     }
 
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -584,7 +584,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Ostat what?\n\r", ch );
+	mxp_to_char( "Ostat what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -592,7 +592,7 @@
 
     if ( ( obj = get_obj_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch );
+	mxp_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -670,7 +670,7 @@
 	strcat( buf1, buf );
     }
 
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -687,13 +687,13 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Mstat whom?\n\r", ch );
+	mxp_to_char( "Mstat whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -793,7 +793,7 @@
 	strcat( buf1, buf );
     }
 
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -814,7 +814,7 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Mfind whom?\n\r", ch );
+	mxp_to_char( "Mfind whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -842,18 +842,18 @@
                 if (!fAll)
 		    strcat( buf1, buf );
                 else
-                    send_to_char( buf, ch ); 
+                    mxp_to_char( buf, ch, MXP_ALL ); 
 	    }
 	}
     }
 
     if ( !found )
     {
-	send_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch );
+	mxp_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch, MXP_ALL );
 	return;
     }
     if(!fAll)
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -874,7 +874,7 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Ofind what?\n\r", ch );
+	mxp_to_char( "Ofind what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -902,19 +902,19 @@
                     if (!fAll)
             		strcat( buf1, buf );
                     else
-                        send_to_char( buf, ch ); 
+                        mxp_to_char( buf, ch, MXP_ALL ); 
 	    }
 	}
     }
 
     if ( !found )
     {
-	send_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch );
+	mxp_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch, MXP_ALL );
 	return;
     }
     
     if(!fAll)
-    send_to_char( buf1, ch );
+    mxp_to_char( buf1, ch, MXP_ALL );
     return;
 }
 
@@ -929,7 +929,7 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Mwhere whom?\n\r", ch );
+	mxp_to_char( "Mwhere whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -946,7 +946,7 @@
 		victim->short_descr,
 		victim->in_room->vnum,
 		victim->in_room->name );
-	    send_to_char(buf, ch);
+	    mxp_to_char(buf, ch, MXP_ALL);
 	}
     }
 
@@ -963,7 +963,7 @@
 
 void do_reboo( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "If you want to REBOOT, spell it out.\n\r", ch );
+    mxp_to_char( "If you want to REBOOT, spell it out.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -984,7 +984,7 @@
 
 void do_shutdow( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "If you want to SHUTDOWN, spell it out.\n\r", ch );
+    mxp_to_char( "If you want to SHUTDOWN, spell it out.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1015,25 +1015,25 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Snoop whom?\n\r", ch );
+	mxp_to_char( "Snoop whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim->desc == NULL )
     {
-	send_to_char( "No descriptor to snoop.\n\r", ch );
+	mxp_to_char( "No descriptor to snoop.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "Cancelling all snoops.\n\r", ch );
+	mxp_to_char( "Cancelling all snoops.\n\r", ch, MXP_ALL );
 	for ( d = descriptor_list; d != NULL; d = d->next )
 	{
 	    if ( d->snoop_by == ch->desc )
@@ -1044,13 +1044,13 @@
 
     if ( victim->desc->snoop_by != NULL )
     {
-	send_to_char( "Busy already.\n\r", ch );
+	mxp_to_char( "Busy already.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1060,14 +1060,14 @@
 	{
 	    if ( d->character == victim || d->original == victim )
 	    {
-		send_to_char( "No snoop loops.\n\r", ch );
+		mxp_to_char( "No snoop loops.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
     }
 
     victim->desc->snoop_by = ch->desc;
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1082,7 +1082,7 @@
     
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Switch into whom?\n\r", ch );
+	mxp_to_char( "Switch into whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1091,19 +1091,19 @@
     
     if ( ch->desc->original != NULL )
     {
-	send_to_char( "You are already switched.\n\r", ch );
+	mxp_to_char( "You are already switched.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1112,13 +1112,13 @@
      */
     if ( !IS_NPC( victim ) )
     {
-        send_to_char( "You cannot switch into a player!\n\r", ch );
+        mxp_to_char( "You cannot switch into a player!\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim->desc != NULL )
     {
-	send_to_char( "Character in use.\n\r", ch );
+	mxp_to_char( "Character in use.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1126,7 +1126,7 @@
     ch->desc->original  = ch;
     victim->desc        = ch->desc;
     ch->desc            = NULL;
-    send_to_char( "Ok.\n\r", victim );
+    mxp_to_char( "Ok.\n\r", victim, MXP_ALL );
     return;
 }
 
@@ -1139,11 +1139,11 @@
 
     if ( ch->desc->original == NULL )
     {
-	send_to_char( "You aren't switched.\n\r", ch );
+	mxp_to_char( "You aren't switched.\n\r", ch, MXP_ALL );
 	return;
     }
 
-    send_to_char( "You return to your original body.\n\r", ch );
+    mxp_to_char( "You return to your original body.\n\r", ch, MXP_ALL );
     ch->desc->character       = ch->desc->original;
     ch->desc->original        = NULL;
     ch->desc->character->desc = ch->desc; 
@@ -1163,20 +1163,20 @@
 
     if ( arg[0] == '\0' || !is_number(arg) )
     {
-	send_to_char( "Syntax: mload <vnum>.\n\r", ch );
+	mxp_to_char( "Syntax: mload <vnum>.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( pMobIndex = get_mob_index( atoi( arg ) ) ) == NULL )
     {
-	send_to_char( "No mob has that vnum.\n\r", ch );
+	mxp_to_char( "No mob has that vnum.\n\r", ch, MXP_ALL );
 	return;
     }
 
     victim = create_mobile( pMobIndex );
     char_to_room( victim, ch->in_room );
     act( "$n has created $N!", ch, NULL, victim, TO_ROOM );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1195,7 +1195,7 @@
  
     if ( arg1[0] == '\0' || !is_number( arg1 ) )
     {
-        send_to_char( "Syntax: oload <vnum> <level>.\n\r", ch );
+        mxp_to_char( "Syntax: oload <vnum> <level>.\n\r", ch, MXP_ALL );
         return;
     }
  
@@ -1210,20 +1210,20 @@
 	 */
         if ( !is_number( arg2 ) )
         {
-	    send_to_char( "Syntax: oload <vnum> <level>.\n\r", ch );
+	    mxp_to_char( "Syntax: oload <vnum> <level>.\n\r", ch, MXP_ALL );
 	    return;
         }
         level = atoi( arg2 );
 	if ( level < 0 || level > get_trust( ch ) )
         {
-	    send_to_char( "Limited to your trust level.\n\r", ch );
+	    mxp_to_char( "Limited to your trust level.\n\r", ch, MXP_ALL );
 	    return;
         }
     }
 
     if ( ( pObjIndex = get_obj_index( atoi( arg1 ) ) ) == NULL )
     {
-	send_to_char( "No object has that vnum.\n\r", ch );
+	mxp_to_char( "No object has that vnum.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1237,7 +1237,7 @@
 	obj_to_room( obj, ch->in_room );
 	act( "$n has created $p!", ch, obj, NULL, TO_ROOM );
     }
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1271,19 +1271,19 @@
 	}
 
 	act( "$n purges the room!", ch, NULL, NULL, TO_ROOM);
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !IS_NPC(victim) )
     {
-	send_to_char( "Not on PC's.\n\r", ch );
+	mxp_to_char( "Not on PC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1307,31 +1307,31 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || !is_number( arg2 ) )
     {
-	send_to_char( "Syntax: advance <char> <level>.\n\r", ch );
+	mxp_to_char( "Syntax: advance <char> <level>.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "That player is not here.\n\r", ch);
+	mxp_to_char( "That player is not here.\n\r", ch, MXP_ALL);
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( level = atoi( arg2 ) ) < 1 || level > 40 )
     {
-	send_to_char( "Level must be 1 to 40.\n\r", ch );
+	mxp_to_char( "Level must be 1 to 40.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( level > get_trust( ch ) )
     {
-	send_to_char( "Limited to your trust level.\n\r", ch );
+	mxp_to_char( "Limited to your trust level.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1346,8 +1346,8 @@
     {
 	int sn;
 
-	send_to_char( "Lowering a player's level!\n\r", ch );
-	send_to_char( "**** OOOOHHHHHHHHHH  NNNNOOOO ****\n\r", victim );
+	mxp_to_char( "Lowering a player's level!\n\r", ch, MXP_ALL );
+	mxp_to_char( "**** OOOOHHHHHHHHHH  NNNNOOOO ****\n\r", victim, MXP_ALL );
 	victim->level    = 1;
 	victim->exp      = 1000;
 	victim->max_hit  = 10;
@@ -1363,13 +1363,13 @@
     }
     else
     {
-	send_to_char( "Raising a player's level!\n\r", ch );
-	send_to_char( "**** OOOOHHHHHHHHHH  YYYYEEEESSS ****\n\r", victim );
+	mxp_to_char( "Raising a player's level!\n\r", ch, MXP_ALL );
+	mxp_to_char( "**** OOOOHHHHHHHHHH  YYYYEEEESSS ****\n\r", victim, MXP_ALL );
     }
 
     for ( iLevel = victim->level ; iLevel < level; iLevel++ )
     {
-	send_to_char( "You raise a level!!  ", victim );
+	mxp_to_char( "You raise a level!!  ", victim, MXP_ALL );
 	victim->level += 1;
 	advance_level( victim );
     }
@@ -1392,25 +1392,25 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || !is_number( arg2 ) )
     {
-	send_to_char( "Syntax: trust <char> <level>.\n\r", ch );
+	mxp_to_char( "Syntax: trust <char> <level>.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "That player is not here.\n\r", ch);
+	mxp_to_char( "That player is not here.\n\r", ch, MXP_ALL);
 	return;
     }
 
     if ( ( level = atoi( arg2 ) ) < 0 || level > 40 )
     {
-	send_to_char( "Level must be 0 (reset) or 1 to 40.\n\r", ch );
+	mxp_to_char( "Level must be 0 (reset) or 1 to 40.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( level > get_trust( ch ) )
     {
-	send_to_char( "Limited to your trust.\n\r", ch );
+	mxp_to_char( "Limited to your trust.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1428,7 +1428,7 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Restore whom?\n\r", ch );
+	mxp_to_char( "Restore whom?\n\r", ch, MXP_ALL );
 	return;
     }
     
@@ -1447,14 +1447,14 @@
                act( "$n has restored you.", ch, NULL, victim, TO_VICT );
 	     }      
 	  }
-       send_to_char( "Ok.\n\r", ch );
+       mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
        return;     
       }
 
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1463,7 +1463,7 @@
     victim->move = victim->max_move;
     update_pos( victim );
     act( "$n has restored you.", ch, NULL, victim, TO_VICT );
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1478,39 +1478,39 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Freeze whom?\n\r", ch );
+	mxp_to_char( "Freeze whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_SET(victim->act, PLR_FREEZE) )
     {
 	REMOVE_BIT(victim->act, PLR_FREEZE);
-	send_to_char( "You can play again.\n\r", victim );
-	send_to_char( "FREEZE removed.\n\r", ch );
+	mxp_to_char( "You can play again.\n\r", victim, MXP_ALL );
+	mxp_to_char( "FREEZE removed.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(victim->act, PLR_FREEZE);
-	send_to_char( "You can't do ANYthing!\n\r", victim );
-	send_to_char( "FREEZE set.\n\r", ch );
+	mxp_to_char( "You can't do ANYthing!\n\r", victim, MXP_ALL );
+	mxp_to_char( "FREEZE set.\n\r", ch, MXP_ALL );
     }
 
     save_char_obj( victim );
@@ -1529,7 +1529,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Log whom?\n\r", ch );
+	mxp_to_char( "Log whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1538,25 +1538,25 @@
 	if ( fLogAll )
 	{
 	    fLogAll = FALSE;
-	    send_to_char( "Log ALL off.\n\r", ch );
+	    mxp_to_char( "Log ALL off.\n\r", ch, MXP_ALL );
 	}
 	else
 	{
 	    fLogAll = TRUE;
-	    send_to_char( "Log ALL on.\n\r", ch );
+	    mxp_to_char( "Log ALL on.\n\r", ch, MXP_ALL );
 	}
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1566,12 +1566,12 @@
     if ( IS_SET(victim->act, PLR_LOG) )
     {
 	REMOVE_BIT(victim->act, PLR_LOG);
-	send_to_char( "LOG removed.\n\r", ch );
+	mxp_to_char( "LOG removed.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(victim->act, PLR_LOG);
-	send_to_char( "LOG set.\n\r", ch );
+	mxp_to_char( "LOG set.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1588,39 +1588,39 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Noemote whom?\n\r", ch );
+	mxp_to_char( "Noemote whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_SET(victim->act, PLR_NO_EMOTE) )
     {
 	REMOVE_BIT(victim->act, PLR_NO_EMOTE);
-	send_to_char( "You can emote again.\n\r", victim );
-	send_to_char( "NO_EMOTE removed.\n\r", ch );
+	mxp_to_char( "You can emote again.\n\r", victim, MXP_ALL );
+	mxp_to_char( "NO_EMOTE removed.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(victim->act, PLR_NO_EMOTE);
-	send_to_char( "You can't emote!\n\r", victim );
-	send_to_char( "NO_EMOTE set.\n\r", ch );
+	mxp_to_char( "You can't emote!\n\r", victim, MXP_ALL );
+	mxp_to_char( "NO_EMOTE set.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1637,39 +1637,39 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Notell whom?", ch );
+	mxp_to_char( "Notell whom?", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_SET(victim->act, PLR_NO_TELL) )
     {
 	REMOVE_BIT(victim->act, PLR_NO_TELL);
-	send_to_char( "You can tell again.\n\r", victim );
-	send_to_char( "NO_TELL removed.\n\r", ch );
+	mxp_to_char( "You can tell again.\n\r", victim, MXP_ALL );
+	mxp_to_char( "NO_TELL removed.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(victim->act, PLR_NO_TELL);
-	send_to_char( "You can't tell!\n\r", victim );
-	send_to_char( "NO_TELL set.\n\r", ch );
+	mxp_to_char( "You can't tell!\n\r", victim, MXP_ALL );
+	mxp_to_char( "NO_TELL set.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1686,39 +1686,39 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Silence whom?", ch );
+	mxp_to_char( "Silence whom?", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_trust( victim ) >= get_trust( ch ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_SET(victim->act, PLR_SILENCE) )
     {
 	REMOVE_BIT(victim->act, PLR_SILENCE);
-	send_to_char( "You can use channels again.\n\r", victim );
-	send_to_char( "SILENCE removed.\n\r", ch );
+	mxp_to_char( "You can use channels again.\n\r", victim, MXP_ALL );
+	mxp_to_char( "SILENCE removed.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(victim->act, PLR_SILENCE);
-	send_to_char( "You can't use channels!\n\r", victim );
-	send_to_char( "SILENCE set.\n\r", ch );
+	mxp_to_char( "You can't use channels!\n\r", victim, MXP_ALL );
+	mxp_to_char( "SILENCE set.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1736,7 +1736,7 @@
 	    stop_fighting( rch, TRUE );
     }
 
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1764,7 +1764,7 @@
 	    strcat( buf, pban->name );
 	    strcat( buf, "\n\r" );
 	}
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	return;
     }
 
@@ -1772,7 +1772,7 @@
     {
 	if ( !str_cmp( arg, pban->name ) )
 	{
-	    send_to_char( "That site is already banned!\n\r", ch );
+	    mxp_to_char( "That site is already banned!\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1790,7 +1790,7 @@
     pban->name	= str_dup( arg );
     pban->next	= ban_list;
     ban_list	= pban;
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1806,7 +1806,7 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Remove which site from the ban list?\n\r", ch );
+	mxp_to_char( "Remove which site from the ban list?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1823,12 +1823,12 @@
 	    free_string( curr->name );
 	    curr->next	= ban_free;
 	    ban_free	= curr;
-	    send_to_char( "Ok.\n\r", ch );
+	    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
 
-    send_to_char( "Site is not banned.\n\r", ch );
+    mxp_to_char( "Site is not banned.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1840,9 +1840,9 @@
     wizlock = !wizlock;
 
     if ( wizlock )
-	send_to_char( "Game wizlocked.\n\r", ch );
+	mxp_to_char( "Game wizlocked.\n\r", ch, MXP_ALL );
     else
-	send_to_char( "Game un-wizlocked.\n\r", ch );
+	mxp_to_char( "Game un-wizlocked.\n\r", ch, MXP_ALL );
 
     return;
 }
@@ -1859,7 +1859,7 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Slookup what?\n\r", ch );
+	mxp_to_char( "Slookup what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1874,19 +1874,19 @@
 		sn, skill_table[sn].slot, skill_table[sn].name );
 	    strcat( buf1, buf );
 	}
-	send_to_char( buf1, ch );
+	mxp_to_char( buf1, ch, MXP_ALL );
     }
     else
     {
 	if ( ( sn = skill_lookup( arg ) ) < 0 )
 	{
-	    send_to_char( "No such skill or spell.\n\r", ch );
+	    mxp_to_char( "No such skill or spell.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	sprintf( buf, "Sn: %4d Slot: %4d Skill/spell: '%s'\n\r",
 	    sn, skill_table[sn].slot, skill_table[sn].name );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
     return;
@@ -1910,21 +1910,21 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || arg3[0] == '\0' )
     {
-	send_to_char( "Syntax: sset <victim> <skill> <value>\n\r",	ch );
-	send_to_char( "or:     sset <victim> all     <value>\n\r",	ch );
-	send_to_char( "Skill being any skill or spell.\n\r",		ch );
+	mxp_to_char( "Syntax: sset <victim> <skill> <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "or:     sset <victim> all     <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "Skill being any skill or spell.\n\r",		ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( IS_NPC(victim) )
     {
-	send_to_char( "Not on NPC's.\n\r", ch );
+	mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1932,7 +1932,7 @@
     sn   = 0;
     if ( !fAll && ( sn = skill_lookup( arg2 ) ) < 0 )
     {
-	send_to_char( "No such skill or spell.\n\r", ch );
+	mxp_to_char( "No such skill or spell.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1941,14 +1941,14 @@
      */
     if ( !is_number( arg3 ) )
     {
-	send_to_char( "Value must be numeric.\n\r", ch );
+	mxp_to_char( "Value must be numeric.\n\r", ch, MXP_ALL );
 	return;
     }
 
     value = atoi( arg3 );
     if ( value < 0 || value > 100 )
     {
-	send_to_char( "Value range is 0 to 100.\n\r", ch );
+	mxp_to_char( "Value range is 0 to 100.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1986,22 +1986,22 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || arg3[0] == '\0' )
     {
-	send_to_char( "Syntax: mset <victim> <field>  <value>\n\r",	ch );
-	send_to_char( "or:     mset <victim> <string> <value>\n\r",	ch );
-	send_to_char( "\n\r",						ch );
-	send_to_char( "Field being one of:\n\r",			ch );
-	send_to_char( "  str int wis dex con sex class level\n\r",	ch );
-	send_to_char( "  gold hp mana move practice align\n\r",		ch );
-	send_to_char( "  thirst drunk full",				ch );
-	send_to_char( "\n\r",						ch );
-	send_to_char( "String being one of:\n\r",			ch );
-	send_to_char( "  name short long description title spec\n\r",	ch );
+	mxp_to_char( "Syntax: mset <victim> <field>  <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "or:     mset <victim> <string> <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "\n\r",						ch, MXP_ALL );
+	mxp_to_char( "Field being one of:\n\r",			ch, MXP_ALL );
+	mxp_to_char( "  str int wis dex con sex class level\n\r",	ch, MXP_ALL );
+	mxp_to_char( "  gold hp mana move practice align\n\r",		ch, MXP_ALL );
+	mxp_to_char( "  thirst drunk full",				ch, MXP_ALL );
+	mxp_to_char( "\n\r",						ch, MXP_ALL );
+	mxp_to_char( "String being one of:\n\r",			ch, MXP_ALL );
+	mxp_to_char( "  name short long description title spec\n\r",	ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2017,7 +2017,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2029,7 +2029,7 @@
 	if ( value < 3 || value > max )
 	{
 	    sprintf( buf, "Strength range is 3 to %d.\n\r", max );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
@@ -2041,7 +2041,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2053,7 +2053,7 @@
 	if ( value < 3 || value > max )
 	{
 	    sprintf( buf, "Intelligence range is 3 to %d.\n\r", max );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
@@ -2065,7 +2065,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2077,7 +2077,7 @@
 	if ( value < 3 || value > max )
 	{
 	    sprintf( buf, "Wisdom range is 3 to %d.\n\r", max );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
@@ -2089,7 +2089,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2101,7 +2101,7 @@
 	if ( value < 3 || value > max )
 	{
 	    sprintf( buf, "Dexterity range is 3 to %d.\n\r", max );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
@@ -2113,7 +2113,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2125,7 +2125,7 @@
 	if ( value < 3 || value > max )
 	{
 	    sprintf( buf, "Constitution range is 3 to %d.\n\r", max );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 
@@ -2137,7 +2137,7 @@
     {
 	if ( value < 0 || value > 2 )
 	{
-	    send_to_char( "Sex range is 0 to 2.\n\r", ch );
+	    mxp_to_char( "Sex range is 0 to 2.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->sex = value;
@@ -2151,7 +2151,7 @@
 	    char buf[MAX_STRING_LENGTH];
 
 	    sprintf( buf, "Class range is 0 to %d.\n", MAX_CLASS-1 );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	    return;
 	}
 	victim->class = value;
@@ -2162,13 +2162,13 @@
     {
 	if ( !IS_NPC(victim) )
 	{
-	    send_to_char( "Not on PC's.\n\r", ch );
+	    mxp_to_char( "Not on PC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( value < 0 || value > 50 )
 	{
-	    send_to_char( "Level range is 0 to 50.\n\r", ch );
+	    mxp_to_char( "Level range is 0 to 50.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->level = value;
@@ -2185,7 +2185,7 @@
     {
 	if ( value < -10 || value > 30000 )
 	{
-	    send_to_char( "Hp range is -10 to 30,000 hit points.\n\r", ch );
+	    mxp_to_char( "Hp range is -10 to 30,000 hit points.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->max_hit = value;
@@ -2196,7 +2196,7 @@
     {
 	if ( value < 0 || value > 30000 )
 	{
-	    send_to_char( "Mana range is 0 to 30,000 mana points.\n\r", ch );
+	    mxp_to_char( "Mana range is 0 to 30,000 mana points.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->max_mana = value;
@@ -2207,7 +2207,7 @@
     {
 	if ( value < 0 || value > 30000 )
 	{
-	    send_to_char( "Move range is 0 to 30,000 move points.\n\r", ch );
+	    mxp_to_char( "Move range is 0 to 30,000 move points.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->max_move = value;
@@ -2218,7 +2218,7 @@
     {
 	if ( value < 0 || value > 100 )
 	{
-	    send_to_char( "Practice range is 0 to 100 sessions.\n\r", ch );
+	    mxp_to_char( "Practice range is 0 to 100 sessions.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->practice = value;
@@ -2229,7 +2229,7 @@
     {
 	if ( value < -1000 || value > 1000 )
 	{
-	    send_to_char( "Alignment range is -1000 to 1000.\n\r", ch );
+	    mxp_to_char( "Alignment range is -1000 to 1000.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	victim->alignment = value;
@@ -2240,13 +2240,13 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( value < 0 || value > 100 )
 	{
-	    send_to_char( "Thirst range is 0 to 100.\n\r", ch );
+	    mxp_to_char( "Thirst range is 0 to 100.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2258,13 +2258,13 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( value < 0 || value > 100 )
 	{
-	    send_to_char( "Drunk range is 0 to 100.\n\r", ch );
+	    mxp_to_char( "Drunk range is 0 to 100.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2276,13 +2276,13 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( value < 0 || value > 100 )
 	{
-	    send_to_char( "Full range is 0 to 100.\n\r", ch );
+	    mxp_to_char( "Full range is 0 to 100.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2294,7 +2294,7 @@
     {
 	if ( !IS_NPC(victim) )
 	{
-	    send_to_char( "Not on PC's.\n\r", ch );
+	    mxp_to_char( "Not on PC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2321,7 +2321,7 @@
     {
 	if ( IS_NPC(victim) )
 	{
-	    send_to_char( "Not on NPC's.\n\r", ch );
+	    mxp_to_char( "Not on NPC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2333,13 +2333,13 @@
     {
 	if ( !IS_NPC(victim) )
 	{
-	    send_to_char( "Not on PC's.\n\r", ch );
+	    mxp_to_char( "Not on PC's.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ( victim->spec_fun = spec_lookup( arg3 ) ) == 0 )
 	{
-	    send_to_char( "No such spec fun.\n\r", ch );
+	    mxp_to_char( "No such spec fun.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2370,21 +2370,21 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || arg3[0] == '\0' )
     {
-	send_to_char( "Syntax: oset <object> <field>  <value>\n\r",	ch );
-	send_to_char( "or:     oset <object> <string> <value>\n\r",	ch );
-	send_to_char( "\n\r",						ch );
-	send_to_char( "Field being one of:\n\r",			ch );
-	send_to_char( "  value0 value1 value2 value3\n\r",		ch );
-	send_to_char( "  extra wear level weight cost timer\n\r",	ch );
-	send_to_char( "\n\r",						ch );
-	send_to_char( "String being one of:\n\r",			ch );
-	send_to_char( "  name short long ed\n\r",			ch );
+	mxp_to_char( "Syntax: oset <object> <field>  <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "or:     oset <object> <string> <value>\n\r",	ch, MXP_ALL );
+	mxp_to_char( "\n\r",						ch, MXP_ALL );
+	mxp_to_char( "Field being one of:\n\r",			ch, MXP_ALL );
+	mxp_to_char( "  value0 value1 value2 value3\n\r",		ch, MXP_ALL );
+	mxp_to_char( "  extra wear level weight cost timer\n\r",	ch, MXP_ALL );
+	mxp_to_char( "\n\r",						ch, MXP_ALL );
+	mxp_to_char( "String being one of:\n\r",			ch, MXP_ALL );
+	mxp_to_char( "  name short long ed\n\r",			ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_obj_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch );
+	mxp_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2484,8 +2484,8 @@
 	argument = one_argument( argument, arg3 );
 	if ( argument == NULL )
 	{
-	    send_to_char( "Syntax: oset <object> ed <keyword> <string>\n\r",
-		ch );
+	    mxp_to_char( "Syntax: oset <object> ed <keyword> <string>\n\r",
+		ch, MXP_ALL );
 	    return;
 	}
 
@@ -2530,16 +2530,16 @@
 
     if ( arg1[0] == '\0' || arg2[0] == '\0' || arg3[0] == '\0' )
     {
-	send_to_char( "Syntax: rset <location> <field> value\n\r",	ch );
-	send_to_char( "\n\r",						ch );
-	send_to_char( "Field being one of:\n\r",			ch );
-	send_to_char( "  flags sector\n\r",				ch );
+	mxp_to_char( "Syntax: rset <location> <field> value\n\r",	ch, MXP_ALL );
+	mxp_to_char( "\n\r",						ch, MXP_ALL );
+	mxp_to_char( "Field being one of:\n\r",			ch, MXP_ALL );
+	mxp_to_char( "  flags sector\n\r",				ch, MXP_ALL );
 	return;
     }
 
     if ( ( location = find_location( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "No such location.\n\r", ch );
+	mxp_to_char( "No such location.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2548,7 +2548,7 @@
      */
     if ( !is_number( arg3 ) )
     {
-	send_to_char( "Value must be numeric.\n\r", ch );
+	mxp_to_char( "Value must be numeric.\n\r", ch, MXP_ALL );
 	return;
     }
     value = atoi( arg3 );
@@ -2604,7 +2604,7 @@
 
     sprintf( buf2, "%d user%s\n\r", count, count == 1 ? "" : "s" );
     strcat( buf, buf2 );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }
 
@@ -2623,7 +2623,7 @@
 
     if ( arg[0] == '\0' || argument[0] == '\0' )
     {
-	send_to_char( "Force whom to do what?\n\r", ch );
+	mxp_to_char( "Force whom to do what?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2638,7 +2638,7 @@
 	    &&   ( cmd_table[cmd].level > trust 
 		  && cmd_table[cmd].level != 41 ) )
 	{
-	  send_to_char( "You cant even do that yourself!\n\r", ch );
+	  mxp_to_char( "You cant even do that yourself!\n\r", ch, MXP_ALL );
 	  return;
 	}
     }
@@ -2666,19 +2666,19 @@
 
 	if ( ( victim = get_char_world( ch, arg ) ) == NULL )
 	{
-	    send_to_char( "They aren't here.\n\r", ch );
+	    mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( victim == ch )
 	{
-	    send_to_char( "Aye aye, right away!\n\r", ch );
+	    mxp_to_char( "Aye aye, right away!\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( get_trust( victim ) >= get_trust( ch ) )
 	{
-	    send_to_char( "Do it yourself!\n\r", ch );
+	    mxp_to_char( "Do it yourself!\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -2687,7 +2687,7 @@
 	interpret( victim, argument );
     }
 
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -2705,13 +2705,13 @@
     {
 	REMOVE_BIT(ch->act, PLR_WIZINVIS);
 	act( "$n slowly fades into existence.", ch, NULL, NULL, TO_ROOM );
-	send_to_char( "You slowly fade back into existence.\n\r", ch );
+	mxp_to_char( "You slowly fade back into existence.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(ch->act, PLR_WIZINVIS);
 	act( "$n slowly fades into thin air.", ch, NULL, NULL, TO_ROOM );
-	send_to_char( "You slowly vanish into thin air.\n\r", ch );
+	mxp_to_char( "You slowly vanish into thin air.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -2727,12 +2727,12 @@
     if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
     {
 	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
-	send_to_char( "Holy light mode off.\n\r", ch );
+	mxp_to_char( "Holy light mode off.\n\r", ch, MXP_ALL );
     }
     else
     {
 	SET_BIT(ch->act, PLR_HOLYLIGHT);
-	send_to_char( "Holy light mode on.\n\r", ch );
+	mxp_to_char( "Holy light mode on.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -2748,17 +2748,17 @@
     argument = one_argument( argument, arg1  );
     if ( arg1[0] == '\0' )
     {
-	send_to_char( "Syntax: wizify <name>\n\r" , ch );
+	mxp_to_char( "Syntax: wizify <name>\n\r" , ch, MXP_ALL );
 	return;
     }
     if ( ( victim = get_char_world( ch, arg1 ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r" , ch );
+	mxp_to_char( "They aren't here.\n\r" , ch, MXP_ALL );
 	return;
     }
     if ( IS_NPC( victim ) )
     {
-	send_to_char( "Not on mobs.\n\r", ch );
+	mxp_to_char( "Not on mobs.\n\r", ch, MXP_ALL );
 	return;
     }
     victim->wizbit = !victim->wizbit;
@@ -2796,7 +2796,7 @@
  
     if( arg[0] == '\0' )
       {
-        send_to_char( "Syntax:  owhere <object>.\n\r", ch );
+        mxp_to_char( "Syntax:  owhere <object>.\n\r", ch, MXP_ALL );
         return;
       }
     
@@ -2833,12 +2833,12 @@
 	  }
             
         obj_counter++;
-        send_to_char( buf, ch );
+        mxp_to_char( buf, ch, MXP_ALL );
       }
  
     if ( !found )
-        send_to_char(
-                "Nothing like that in hell, earth, or heaven.\n\r" , ch );
+        mxp_to_char(
+                "Nothing like that in hell, earth, or heaven.\n\r" , ch, MXP_ALL );
     return;
  
   }
diff -u srcorig/comm.c src/comm.c
--- srcorig/comm.c	2004-12-01 08:18:50.000000000 -0600
+++ src/comm.c	2004-12-13 18:25:43.000000000 -0600
@@ -103,6 +103,12 @@
 const	char	echo_off_str	[] = { IAC, WILL, TELOPT_ECHO, '\0' };
 const	char	echo_on_str	[] = { IAC, WONT, TELOPT_ECHO, '\0' };
 const	char 	go_ahead_str	[] = { IAC, GA, '\0' };
+const   char    mccp_will       [] = { IAC, WILL, TELOPT_COMPRESS, '\0' };   
+const   char    mccp_do        [] = { IAC, DO, TELOPT_COMPRESS, '\0' };   
+const   char    mccp_dont      [] = { IAC, DONT, TELOPT_COMPRESS, '\0' };   
+
+bool    compressStart   args( ( DESCRIPTOR_DATA *d ) );
+bool    compressEnd     args( ( DESCRIPTOR_DATA *d ) );
 #endif
 
 
@@ -291,7 +297,6 @@
 #if defined(macintosh) || defined(MSDOS)
 void	game_loop_mac_msdos	args( ( void ) );
 bool	read_from_descriptor	args( ( DESCRIPTOR_DATA *d ) );
-bool	write_to_descriptor	args( ( int desc, char *txt, int length ) );
 #endif
 
 #if defined(unix)
@@ -299,12 +304,8 @@
 int	init_socket		args( ( int port ) );
 void	new_descriptor		args( ( int control ) );
 bool	read_from_descriptor	args( ( DESCRIPTOR_DATA *d ) );
-bool	write_to_descriptor	args( ( int desc, char *txt, int length ) );
 #endif
 
-
-
-
 /*
  * Other local functions (OS-independent).
  */
@@ -627,8 +628,6 @@
 }
 #endif
 
-
-
 #if defined(unix)
 void game_loop_unix( int control )
 {
@@ -876,7 +875,7 @@
     dnew->showstr_point = NULL;
     dnew->outsize	= 2000;
     dnew->outbuf	= alloc_mem( dnew->outsize );
-
+    dnew->mxp           = FALSE;
     size = sizeof(sock);
     if ( getpeername( desc, (struct sockaddr *) &sock, &size ) < 0 )
     {
@@ -915,7 +914,7 @@
     {
 	if ( str_suffix( pban->name, dnew->host ) )
 	{
-	    write_to_descriptor( desc,
+	    write_to_descriptor_2( desc,
 		"Your site has been banned from this Mud.\n\r", 0 );
 	    close( desc );
 	    free_string( dnew->host );
@@ -932,6 +931,9 @@
     dnew->next			= descriptor_list;
     descriptor_list		= dnew;
 
+    write_to_buffer(dnew, mxp_will, 0);
+    write_to_buffer(dnew, mccp_will, 0);
+
     /*
      * Send the greeting.
      */
@@ -1006,6 +1008,8 @@
 	    bug( "Close_socket: dclose not found.", 0 );
     }
 
+    compressEnd(dclose);
+
     close( dclose->descriptor );
     free_string( dclose->host );
     dclose->next	= descriptor_free;
@@ -1032,7 +1036,7 @@
     {
 	sprintf( log_buf, "%s input overflow!", d->host );
 	log_string( log_buf );
-	write_to_descriptor( d->descriptor,
+	write_to_descriptor( d,
 	    "\n\r*** PUT A LID ON IT!!! ***\n\r", 0 );
 	return FALSE;
     }
@@ -1117,7 +1121,7 @@
     {
 	if ( k >= MAX_INPUT_LENGTH - 2 )
 	{
-	    write_to_descriptor( d->descriptor, "Line too long.\n\r", 0 );
+	    write_to_descriptor( d, "Line too long.\n\r", 0 );
 
 	    /* skip the rest of the line */
 	    for ( ; d->inbuf[i] != '\0'; i++ )
@@ -1130,10 +1134,32 @@
 	    break;
 	}
 
-	if ( d->inbuf[i] == '\b' && k > 0 )
-	    --k;
-	else if ( isascii(d->inbuf[i]) && isprint(d->inbuf[i]) )
-	    d->incomm[k++] = d->inbuf[i];
+        if ( d->inbuf[i] == (signed char)IAC )
+	{
+	    if (!memcmp(&d->inbuf[i], mxp_do, strlen(mxp_do)))
+	    {
+                i += strlen(mxp_do) - 1;
+                init_mxp(d);
+	    } else if (!memcmp(&d->inbuf[i], mxp_dont, strlen(mxp_dont)))
+	    {
+                i += strlen(mxp_do) - 1;
+                shutdown_mxp(d);
+	    } else if (!memcmp(&d->inbuf[i], mccp_do, strlen(mccp_do)))
+	    {
+                i += strlen(mxp_do) - 1;
+                compressStart(d);
+	    }
+	    else if (!memcmp(&d->inbuf[i], mccp_dont, strlen(mccp_dont)))
+	    {
+                i += strlen(mxp_do) - 1;
+                compressEnd(d);
+	    }
+        }
+        else if ( d->inbuf[i] == '\b' && k > 0 )
+            --k;
+        else if ( isascii(d->inbuf[i]) && isprint(d->inbuf[i]) )
+            d->incomm[k++] = d->inbuf[i];
+
     }
 
     /*
@@ -1158,7 +1184,7 @@
 	    {
 		sprintf( log_buf, "%s input spamming!", d->host );
 		log_string( log_buf );
-		write_to_descriptor( d->descriptor,
+		write_to_descriptor( d,
 		    "\n\r*** PUT A LID ON IT!!! ***\n\r", 0 );
 		strcpy( d->incomm, "quit" );
 	    }
@@ -1234,7 +1260,7 @@
     /*
      * OS-dependent output.
      */
-    if ( !write_to_descriptor( d->descriptor, d->outbuf, d->outtop ) )
+    if ( !write_to_descriptor( d, d->outbuf, d->outtop ) )
     {
 	d->outtop = 0;
 	return FALSE;
@@ -1264,7 +1290,7 @@
 
    if( ch->prompt == NULL || ch->prompt[0] == '\0' )
    {
-      send_to_char( "\n\r\n\r", ch );
+      mxp_to_char( "\n\r\n\r", ch, MXP_ALL );
       return;
    }
 
@@ -1435,7 +1461,7 @@
  * If this gives errors on very long blocks (like 'ofind all'),
  *   try lowering the max block size.
  */
-bool write_to_descriptor( int desc, char *txt, int length )
+bool write_to_descriptor_2( int desc, char *txt, int length )
 {
     int iStart;
     int nWrite;
@@ -1449,6 +1475,9 @@
     if ( length <= 0 )
 	length = strlen(txt);
 
+// For mudinfo.c snippet
+//    increase_total_output(length);
+
     for ( iStart = 0; iStart < length; iStart += nWrite )
     {
 	nBlock = UMIN( length - iStart, 4096 );
@@ -1459,6 +1488,14 @@
     return TRUE;
 }
 
+/* mccp: write_to_descriptor wrapper */
+bool write_to_descriptor(DESCRIPTOR_DATA *d, char *txt, int length)
+{
+    if (d->out_compress)
+        return writeCompressed(d, txt, length);
+    else
+        return write_to_descriptor_2(d->descriptor, txt, length);
+}
 
 
 /*
@@ -1707,9 +1744,9 @@
 	char_list	= ch;
 	d->connected	= CON_PLAYING;
 
-	send_to_char(
+	mxp_to_char(
     "\n\rWelcome to Merc Diku Mud.  May your visit here be ... Mercenary.\n\r",
-	    ch );
+	    ch, MXP_ALL );
 
 	if ( ch->level == 0 )
 	{
@@ -1777,13 +1814,13 @@
 	        notes++;
 
 	if ( notes == 1 )
-	    send_to_char( "\n\rYou have one new note waiting.\n\r", ch );
+	    mxp_to_char( "\n\rYou have one new note waiting.\n\r", ch, MXP_ALL);
 	else
 	    if ( notes > 1 )
 	    {
 		sprintf( buf, "\n\rYou have %d new notes waiting.\n\r",
 			notes );
-		send_to_char( buf, ch );
+		mxp_to_char( buf, ch, MXP_ALL );
 	    }
 
 	break;
@@ -1892,7 +1929,7 @@
 		d->character = ch;
 		ch->desc	 = d;
 		ch->timer	 = 0;
-		send_to_char( "Reconnecting.\n\r", ch );
+		mxp_to_char( "Reconnecting.\n\r", ch, MXP_ALL );
 		act( "$n has reconnected.", ch, NULL, NULL, TO_ROOM );
 		sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
 		log_string( log_buf );
diff -u srcorig/db.c src/db.c
--- srcorig/db.c	2004-12-01 08:18:50.000000000 -0600
+++ src/db.c	2004-12-06 07:32:58.000000000 -0600
@@ -1105,8 +1105,8 @@
 		&&   pch->in_room != NULL
 		&&   pch->in_room->area == pArea )
 		{
-		    send_to_char( "You hear the patter of little feet.\n\r",
-			pch );
+		    mxp_to_char( "You hear the patter of little feet.\n\r",
+			pch, MXP_ALL );
 		}
 	    }
 	}
@@ -2113,7 +2113,7 @@
     {
 	sprintf( buf, "%-39s%-39s\n\r",
 	    pArea1->name, (pArea2 != NULL) ? pArea2->name : "" );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	pArea1 = pArea1->next;
 	if ( pArea2 != NULL )
 	    pArea2 = pArea2->next;
@@ -2128,24 +2128,24 @@
 {
     char buf[MAX_STRING_LENGTH];
 
-    sprintf( buf, "Affects %5d\n\r", top_affect    ); send_to_char( buf, ch );
-    sprintf( buf, "Areas   %5d\n\r", top_area      ); send_to_char( buf, ch );
-    sprintf( buf, "ExDes   %5d\n\r", top_ed        ); send_to_char( buf, ch );
-    sprintf( buf, "Exits   %5d\n\r", top_exit      ); send_to_char( buf, ch );
-    sprintf( buf, "Helps   %5d\n\r", top_help      ); send_to_char( buf, ch );
-    sprintf( buf, "Mobs    %5d\n\r", top_mob_index ); send_to_char( buf, ch );
-    sprintf( buf, "Objs    %5d\n\r", top_obj_index ); send_to_char( buf, ch );
-    sprintf( buf, "Resets  %5d\n\r", top_reset     ); send_to_char( buf, ch );
-    sprintf( buf, "Rooms   %5d\n\r", top_room      ); send_to_char( buf, ch );
-    sprintf( buf, "Shops   %5d\n\r", top_shop      ); send_to_char( buf, ch );
+    sprintf( buf, "Affects %5d\n\r", top_affect    ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Areas   %5d\n\r", top_area      ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "ExDes   %5d\n\r", top_ed        ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Exits   %5d\n\r", top_exit      ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Helps   %5d\n\r", top_help      ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Mobs    %5d\n\r", top_mob_index ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Objs    %5d\n\r", top_obj_index ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Resets  %5d\n\r", top_reset     ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Rooms   %5d\n\r", top_room      ); mxp_to_char( buf, ch, MXP_ALL );
+    sprintf( buf, "Shops   %5d\n\r", top_shop      ); mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "Strings %5d strings of %7d bytes (max %d).\n\r",
 	nAllocString, sAllocString, MAX_STRING );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "Perms   %5d blocks  of %7d bytes.\n\r",
 	nAllocPerm, sAllocPerm );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     return;
 }
@@ -2470,7 +2470,7 @@
     if ( ( fp = fopen( file, "a" ) ) == NULL )
     {
 	perror( file );
-	send_to_char( "Could not open the file!\n\r", ch );
+	mxp_to_char( "Could not open the file!\n\r", ch, MXP_ALL );
     }
     else
     {
diff -u srcorig/fight.c src/fight.c
--- srcorig/fight.c	2004-12-01 08:18:50.000000000 -0600
+++ src/fight.c	2004-12-06 07:39:22.000000000 -0600
@@ -399,36 +399,36 @@
     case POS_MORTAL:
 	act( "$n is mortally wounded, and will die soon, if not aided.",
 	    victim, NULL, NULL, TO_ROOM );
-	send_to_char( 
+	mxp_to_char( 
 	    "You are mortally wounded, and will die soon, if not aided.\n\r",
-	    victim );
+	    victim, MXP_ALL );
 	break;
 
     case POS_INCAP:
 	act( "$n is incapacitated and will slowly die, if not aided.",
 	    victim, NULL, NULL, TO_ROOM );
-	send_to_char(
+	mxp_to_char(
 	    "You are incapacitated and will slowly die, if not aided.\n\r",
-	    victim );
+	    victim, MXP_ALL );
 	break;
 
     case POS_STUNNED:
 	act( "$n is stunned, but will probably recover.",
 	    victim, NULL, NULL, TO_ROOM );
-	send_to_char("You are stunned, but will probably recover.\n\r",
-	    victim );
+	mxp_to_char("You are stunned, but will probably recover.\n\r",
+	    victim, MXP_ALL );
 	break;
 
     case POS_DEAD:
 	act( "$n is DEAD!!", victim, 0, 0, TO_ROOM );
-	send_to_char( "You have been KILLED!!\n\r\n\r", victim );
+	mxp_to_char( "You have been KILLED!!\n\r\n\r", victim, MXP_ALL );
 	break;
 
     default:
 	if ( dam > victim->max_hit / 4 )
-	    send_to_char( "That really did HURT!\n\r", victim );
+	    mxp_to_char( "That really did HURT!\n\r", victim, MXP_ALL );
 	if ( victim->hit < victim->max_hit / 4 )
-	    send_to_char( "You sure are BLEEDING!\n\r", victim );
+	    mxp_to_char( "You sure are BLEEDING!\n\r", victim, MXP_ALL );
 	break;
     }
 
@@ -523,7 +523,7 @@
 
     if ( get_age( ch ) < 21 )
     {
-	send_to_char( "You aren't old enough.\n\r", ch );
+	mxp_to_char( "You aren't old enough.\n\r", ch, MXP_ALL );
 	return TRUE;
     }
 
@@ -532,7 +532,7 @@
 
     if ( ch->level >= victim->level )
     {
-	send_to_char( "You may not attack a lower level player.\n\r", ch );
+	mxp_to_char( "You may not attack a lower level player.\n\r", ch, MXP_ALL );
 	return TRUE;
     }
 
@@ -579,7 +579,7 @@
 	    return;
 	}
 
-	send_to_char( "*** You are now a KILLER!! ***\n\r", ch->master );
+	mxp_to_char( "*** You are now a KILLER!! ***\n\r", ch->master, MXP_ALL );
 	SET_BIT(ch->master->act, PLR_KILLER);
 	stop_follower( ch );
 	return;
@@ -597,7 +597,7 @@
     ||   IS_SET(ch->act, PLR_KILLER) )
 	return;
 
-    send_to_char( "*** You are now a KILLER!! ***\n\r", ch );
+    mxp_to_char( "*** You are now a KILLER!! ***\n\r", ch, MXP_ALL );
     SET_BIT(ch->act, PLR_KILLER);
     save_char_obj( ch );
     return;
@@ -933,19 +933,19 @@
 
 	if ( gch->level - lch->level >= 6 )
 	{
-	    send_to_char( "You are too high for this group.\n\r", gch );
+	    mxp_to_char( "You are too high for this group.\n\r", gch, MXP_ALL );
 	    continue;
 	}
 
 	if ( gch->level - lch->level <= -6 )
 	{
-	    send_to_char( "You are too low for this group.\n\r", gch );
+	    mxp_to_char( "You are too low for this group.\n\r", gch, MXP_ALL );
 	    continue;
 	}
 
 	xp = xp_compute( gch, victim ) / members;
 	sprintf( buf, "You receive %d experience points.\n\r", xp );
-	send_to_char( buf, gch );
+	mxp_to_char( buf, gch, MXP_ALL );
 	gain_exp( gch, xp );
 
 	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
@@ -1152,13 +1152,13 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Kill whom?\n\r", ch );
+	mxp_to_char( "Kill whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1167,7 +1167,7 @@
 	if ( !IS_SET(victim->act, PLR_KILLER)
 	&&   !IS_SET(victim->act, PLR_THIEF) )
 	{
-	    send_to_char( "You must MURDER a player.\n\r", ch );
+	    mxp_to_char( "You must MURDER a player.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
@@ -1175,14 +1175,14 @@
     {
 	if ( IS_AFFECTED(victim, AFF_CHARM) && victim->master != NULL )
 	{
-	    send_to_char( "You must MURDER a charmed creature.\n\r", ch );
+	    mxp_to_char( "You must MURDER a charmed creature.\n\r", ch, MXP_ALL );
 	    return;
 	}
     }
 
     if ( victim == ch )
     {
-	send_to_char( "You hit yourself.  Ouch!\n\r", ch );
+	mxp_to_char( "You hit yourself.  Ouch!\n\r", ch, MXP_ALL );
 	multi_hit( ch, ch, TYPE_UNDEFINED );
 	return;
     }
@@ -1198,7 +1198,7 @@
 
     if ( ch->position == POS_FIGHTING )
     {
-	send_to_char( "You do the best you can!\n\r", ch );
+	mxp_to_char( "You do the best you can!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1212,7 +1212,7 @@
 
 void do_murde( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "If you want to MURDER, spell it out.\n\r", ch );
+    mxp_to_char( "If you want to MURDER, spell it out.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1228,19 +1228,19 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Murder whom?\n\r", ch );
+	mxp_to_char( "Murder whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "Suicide is a mortal sin.\n\r", ch );
+	mxp_to_char( "Suicide is a mortal sin.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1255,7 +1255,7 @@
 
     if ( ch->position == POS_FIGHTING )
     {
-	send_to_char( "You do the best you can!\n\r", ch );
+	mxp_to_char( "You do the best you can!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1278,8 +1278,8 @@
     if ( !IS_NPC(ch)
     &&   ch->level < skill_table[gsn_backstab].skill_level[ch->class] )
     {
-	send_to_char(
-	    "You better leave the assassin trade to thieves.\n\r", ch );
+	mxp_to_char(
+	    "You better leave the assassin trade to thieves.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1287,19 +1287,19 @@
     
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Backstab whom?\n\r", ch );
+	mxp_to_char( "Backstab whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "How can you sneak up on yourself?\n\r", ch );
+	mxp_to_char( "How can you sneak up on yourself?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1309,13 +1309,13 @@
     if ( ( obj = get_eq_char( ch, WEAR_WIELD ) ) == NULL
     ||   obj->value[3] != 11 )
     {
-	send_to_char( "You need to wield a piercing weapon.\n\r", ch );
+	mxp_to_char( "You need to wield a piercing weapon.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim->fighting != NULL )
     {
-	send_to_char( "You can't backstab a fighting person.\n\r", ch );
+	mxp_to_char( "You can't backstab a fighting person.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1351,7 +1351,7 @@
     {
 	if ( ch->position == POS_FIGHTING )
 	    ch->position = POS_STANDING;
-	send_to_char( "You aren't fighting anyone.\n\r", ch );
+	mxp_to_char( "You aren't fighting anyone.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1381,7 +1381,7 @@
 
 	if ( !IS_NPC(ch) )
 	{
-	    send_to_char( "You flee from combat!  You lose 25 exps.\n\r", ch );
+	    mxp_to_char( "You flee from combat!  You lose 25 exps.\n\r", ch, MXP_ALL );
 	    gain_exp( ch, -25 );
 	}
 
@@ -1389,7 +1389,7 @@
 	return;
     }
 
-    send_to_char( "You failed!  You lose 10 exps.\n\r", ch );
+    mxp_to_char( "You failed!  You lose 10 exps.\n\r", ch, MXP_ALL );
     gain_exp( ch, -10 );
     return;
 }
@@ -1405,8 +1405,8 @@
     if ( !IS_NPC(ch)
     &&   ch->level < skill_table[gsn_rescue].skill_level[ch->class] )
     {
-	send_to_char(
-	    "You better leave the heroic acts to warriors.\n\r", ch );
+	mxp_to_char(
+	    "You better leave the heroic acts to warriors.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1414,44 +1414,44 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Rescue whom?\n\r", ch );
+	mxp_to_char( "Rescue whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( victim == ch )
     {
-	send_to_char( "What about fleeing instead?\n\r", ch );
+	mxp_to_char( "What about fleeing instead?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !IS_NPC(ch) && IS_NPC(victim) )
     {
-	send_to_char( "Doesn't need your help!\n\r", ch );
+	mxp_to_char( "Doesn't need your help!\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch->fighting == victim )
     {
-	send_to_char( "Too late.\n\r", ch );
+	mxp_to_char( "Too late.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( fch = victim->fighting ) == NULL )
     {
-	send_to_char( "That person is not fighting right now.\n\r", ch );
+	mxp_to_char( "That person is not fighting right now.\n\r", ch, MXP_ALL );
 	return;
     }
 
     WAIT_STATE( ch, skill_table[gsn_rescue].beats );
     if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[gsn_rescue] )
     {
-	send_to_char( "You fail the rescue.\n\r", ch );
+	mxp_to_char( "You fail the rescue.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1477,14 +1477,14 @@
     if ( !IS_NPC(ch)
     &&   ch->level < skill_table[gsn_kick].skill_level[ch->class] )
     {
-	send_to_char(
-	    "You better leave the martial arts to fighters.\n\r", ch );
+	mxp_to_char(
+	    "You better leave the martial arts to fighters.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = ch->fighting ) == NULL )
     {
-	send_to_char( "You aren't fighting anyone.\n\r", ch );
+	mxp_to_char( "You aren't fighting anyone.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1509,25 +1509,25 @@
     if ( !IS_NPC(ch)
     &&   ch->level < skill_table[gsn_disarm].skill_level[ch->class] )
     {
-	send_to_char( "You don't know how to disarm opponents.\n\r", ch );
+	mxp_to_char( "You don't know how to disarm opponents.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( get_eq_char( ch, WEAR_WIELD ) == NULL )
     {
-	send_to_char( "You must wield a weapon to disarm.\n\r", ch );
+	mxp_to_char( "You must wield a weapon to disarm.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = ch->fighting ) == NULL )
     {
-	send_to_char( "You aren't fighting anyone.\n\r", ch );
+	mxp_to_char( "You aren't fighting anyone.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( obj = get_eq_char( victim, WEAR_WIELD ) ) == NULL )
     {
-	send_to_char( "Your opponent is not wielding a weapon.\n\r", ch );
+	mxp_to_char( "Your opponent is not wielding a weapon.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1536,7 +1536,7 @@
     if ( IS_NPC(ch) || percent < ch->pcdata->learned[gsn_disarm] * 2 / 3 )
 	disarm( ch, victim );
     else
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1544,7 +1544,7 @@
 
 void do_sla( CHAR_DATA *ch, char *argument )
 {
-    send_to_char( "If you want to SLAY, spell it out.\n\r", ch );
+    mxp_to_char( "If you want to SLAY, spell it out.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1558,25 +1558,25 @@
     one_argument( argument, arg );
     if ( arg[0] == '\0' )
     {
-	send_to_char( "Slay whom?\n\r", ch );
+	mxp_to_char( "Slay whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ch == victim )
     {
-	send_to_char( "Suicide is a mortal sin.\n\r", ch );
+	mxp_to_char( "Suicide is a mortal sin.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !IS_NPC(victim) && victim->level >= ch->level )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
diff -u srcorig/interp.c src/interp.c
--- srcorig/interp.c	2004-12-01 08:18:50.000000000 -0600
+++ src/interp.c	2004-12-06 09:55:17.000000000 -0600
@@ -132,6 +132,8 @@
     { "prompt",         do_prompt,      POS_DEAD,        0,  LOG_NORMAL },
     { "title",		do_title,	POS_DEAD,	 0,  LOG_NORMAL	},
     { "wimpy",		do_wimpy,	POS_DEAD,	 0,  LOG_NORMAL	},
+    { "mxp",		do_mxp,		POS_DEAD,	 0,  LOG_NORMAL	},
+    { "mccp",		do_compress,	POS_DEAD,	 0,  LOG_NORMAL	},
 
     /*
      * Communication commands.
@@ -1344,7 +1346,7 @@
      */
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_FREEZE) )
     {
-	send_to_char( "You're totally frozen!\n\r", ch );
+	mxp_to_char( "You're totally frozen!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1411,7 +1413,7 @@
 	 * Look for command in socials table.
 	 */
 	if ( !check_social( ch, command, argument ) )
-	    send_to_char( "Huh?\n\r", ch );
+	    mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -1423,28 +1425,28 @@
 	switch( ch->position )
 	{
 	case POS_DEAD:
-	    send_to_char( "Lie still; you are DEAD.\n\r", ch );
+	    mxp_to_char( "Lie still; you are DEAD.\n\r", ch, MXP_ALL );
 	    break;
 
 	case POS_MORTAL:
 	case POS_INCAP:
-	    send_to_char( "You are hurt far too bad for that.\n\r", ch );
+	    mxp_to_char( "You are hurt far too bad for that.\n\r", ch, MXP_ALL );
 	    break;
 
 	case POS_STUNNED:
-	    send_to_char( "You are too stunned to do that.\n\r", ch );
+	    mxp_to_char( "You are too stunned to do that.\n\r", ch, MXP_ALL );
 	    break;
 
 	case POS_SLEEPING:
-	    send_to_char( "In your dreams, or what?\n\r", ch );
+	    mxp_to_char( "In your dreams, or what?\n\r", ch, MXP_ALL );
 	    break;
 
 	case POS_RESTING:
-	    send_to_char( "Nah... You feel too relaxed...\n\r", ch);
+	    mxp_to_char( "Nah... You feel too relaxed...\n\r", ch, MXP_ALL );
 	    break;
 
 	case POS_FIGHTING:
-	    send_to_char( "No way!  You are still fighting!\n\r", ch);
+	    mxp_to_char( "No way!  You are still fighting!\n\r", ch, MXP_ALL );
 	    break;
 
 	}
@@ -1485,23 +1487,23 @@
 
     if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
     {
-	send_to_char( "You are anti-social!\n\r", ch );
+	mxp_to_char( "You are anti-social!\n\r", ch, MXP_ALL );
 	return TRUE;
     }
 
     switch ( ch->position )
     {
     case POS_DEAD:
-	send_to_char( "Lie still; you are DEAD.\n\r", ch );
+	mxp_to_char( "Lie still; you are DEAD.\n\r", ch, MXP_ALL );
 	return TRUE;
 
     case POS_INCAP:
     case POS_MORTAL:
-	send_to_char( "You are hurt far too bad for that.\n\r", ch );
+	mxp_to_char( "You are hurt far too bad for that.\n\r", ch, MXP_ALL );
 	return TRUE;
 
     case POS_STUNNED:
-	send_to_char( "You are too stunned to do that.\n\r", ch );
+	mxp_to_char( "You are too stunned to do that.\n\r", ch, MXP_ALL );
 	return TRUE;
 
     case POS_SLEEPING:
@@ -1511,7 +1513,7 @@
 	 */
 	if ( !str_cmp( social_table[cmd].name, "snore" ) )
 	    break;
-	send_to_char( "In your dreams, or what?\n\r", ch );
+	mxp_to_char( "In your dreams, or what?\n\r", ch, MXP_ALL );
 	return TRUE;
 
     }
@@ -1525,7 +1527,7 @@
     }
     else if ( ( victim = get_char_room( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
     }
     else if ( victim == ch )
     {
diff -u srcorig/magic.c src/magic.c
--- srcorig/magic.c	2004-12-01 08:18:50.000000000 -0600
+++ src/magic.c	2004-12-06 07:44:48.000000000 -0600
@@ -211,20 +211,20 @@
 
     if ( arg1[0] == '\0' )
     {
-	send_to_char( "Cast which what where?\n\r", ch );
+	mxp_to_char( "Cast which what where?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( sn = skill_lookup( arg1 ) ) < 0
     || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level[ch->class] ) )
     {
-	send_to_char( "You can't do that.\n\r", ch );
+	mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	return;
     }
   
     if ( ch->position < skill_table[sn].minimum_position )
     {
-	send_to_char( "You can't concentrate enough.\n\r", ch );
+	mxp_to_char( "You can't concentrate enough.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -251,7 +251,7 @@
 	{
 	    if ( ( victim = ch->fighting ) == NULL )
 	    {
-		send_to_char( "Cast the spell on whom?\n\r", ch );
+		mxp_to_char( "Cast the spell on whom?\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -259,7 +259,7 @@
 	{
 	    if ( ( victim = get_char_room( ch, arg2 ) ) == NULL )
 	    {
-		send_to_char( "They aren't here.\n\r", ch );
+		mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -268,14 +268,14 @@
 	{
 	    if ( !IS_NPC(victim) && ch != victim )
 	    {
-		send_to_char( "You can't do that on a player.\n\r", ch );
+		mxp_to_char( "You can't do that on a player.\n\r", ch, MXP_ALL );
 		return;
 	    }
 
 	    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
 	    {
-		send_to_char( "You can't do that on your own follower.\n\r",
-		    ch );
+		mxp_to_char( "You can't do that on your own follower.\n\r",
+		    ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -292,7 +292,7 @@
 	{
 	    if ( ( victim = get_char_room( ch, arg2 ) ) == NULL )
 	    {
-		send_to_char( "They aren't here.\n\r", ch );
+		mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 		return;
 	    }
 	}
@@ -303,7 +303,7 @@
     case TAR_CHAR_SELF:
 	if ( arg2[0] != '\0' && !is_name( arg2, ch->name ) )
 	{
-	    send_to_char( "You cannot cast this spell on another.\n\r", ch );
+	    mxp_to_char( "You cannot cast this spell on another.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -313,13 +313,13 @@
     case TAR_OBJ_INV:
 	if ( arg2[0] == '\0' )
 	{
-	    send_to_char( "What should the spell be cast upon?\n\r", ch );
+	    mxp_to_char( "What should the spell be cast upon?\n\r", ch, MXP_ALL );
 	    return;
 	}
 
 	if ( ( obj = get_obj_carry( ch, arg2 ) ) == NULL )
 	{
-	    send_to_char( "You are not carrying that.\n\r", ch );
+	    mxp_to_char( "You are not carrying that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 
@@ -329,7 +329,7 @@
 	    
     if ( !IS_NPC(ch) && ch->mana < mana )
     {
-	send_to_char( "You don't have enough mana.\n\r", ch );
+	mxp_to_char( "You don't have enough mana.\n\r", ch, MXP_ALL );
 	return;
     }
       
@@ -340,7 +340,7 @@
       
     if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[sn] )
     {
-	send_to_char( "You lost your concentration.\n\r", ch );
+	mxp_to_char( "You lost your concentration.\n\r", ch, MXP_ALL );
 	ch->mana -= mana / 2;
     }
     else
@@ -402,7 +402,7 @@
 	    victim = ch->fighting;
 	if ( victim == NULL || !IS_NPC(victim) )
 	{
-	    send_to_char( "You can't do that.\n\r", ch );
+	    mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	vo = (void *) victim;
@@ -421,7 +421,7 @@
     case TAR_OBJ_INV:
 	if ( obj == NULL )
 	{
-	    send_to_char( "You can't do that.\n\r", ch );
+	    mxp_to_char( "You can't do that.\n\r", ch, MXP_ALL );
 	    return;
 	}
 	vo = (void *) obj;
@@ -482,9 +482,9 @@
     af.location  = APPLY_AC;
     af.bitvector = 0;
     affect_to_char( victim, &af );
-    send_to_char( "You feel someone protecting you.\n\r", victim );
+    mxp_to_char( "You feel someone protecting you.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -507,9 +507,9 @@
     af.location  = APPLY_SAVING_SPELL;
     af.modifier  = 0 - level / 8;
     affect_to_char( victim, &af );
-    send_to_char( "You feel righteous.\n\r", victim );
+    mxp_to_char( "You feel righteous.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -529,9 +529,9 @@
     af.duration  = 1+level;
     af.bitvector = AFF_BLIND;
     affect_to_char( victim, &af );
-    send_to_char( "You are blinded!\n\r", victim );
+    mxp_to_char( "You are blinded!\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -570,19 +570,19 @@
 
     if ( !IS_OUTSIDE(ch) )
     {
-	send_to_char( "You must be out of doors.\n\r", ch );
+	mxp_to_char( "You must be out of doors.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( weather_info.sky < SKY_RAINING )
     {
-	send_to_char( "You need bad weather.\n\r", ch );
+	mxp_to_char( "You need bad weather.\n\r", ch, MXP_ALL );
 	return;
     }
 
     dam = dice(level/2, 8);
 
-    send_to_char( "God's lightning strikes your foes!\n\r", ch );
+    mxp_to_char( "God's lightning strikes your foes!\n\r", ch, MXP_ALL );
     act( "$n calls God's lightning to strike $s foes!",
 	ch, NULL, NULL, TO_ROOM );
 
@@ -601,7 +601,7 @@
 	if ( vch->in_room->area == ch->in_room->area
 	&&   IS_OUTSIDE(vch)
 	&&   IS_AWAKE(vch) )
-	    send_to_char( "Lightning flashes in the sky.\n\r", vch );
+	    mxp_to_char( "Lightning flashes in the sky.\n\r", vch, MXP_ALL );
     }
 
     return;
@@ -651,9 +651,9 @@
     while ( af.modifier == 0 );
     af.bitvector = 0;
     affect_to_char( victim, &af );
-    send_to_char( "You feel different.\n\r", victim );
+    mxp_to_char( "You feel different.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -666,7 +666,7 @@
 
     if ( victim == ch )
     {
-	send_to_char( "You like yourself even better!\n\r", ch );
+	mxp_to_char( "You like yourself even better!\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -687,7 +687,7 @@
     affect_to_char( victim, &af );
     act( "Isn't $n just so nice?", ch, NULL, victim, TO_VICT );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -777,9 +777,9 @@
     else if ( !str_cmp( target_name, "worse" ) )
 	weather_info.change -= dice( level / 3, 4 );
     else
-	send_to_char ("Do you want it to get better or worse?\n\r", ch );
+	mxp_to_char ("Do you want it to get better or worse?\n\r", ch, MXP_ALL );
 
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -820,13 +820,13 @@
 
     if ( obj->item_type != ITEM_DRINK_CON )
     {
-	send_to_char( "It is unable to hold water.\n\r", ch );
+	mxp_to_char( "It is unable to hold water.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( obj->value[2] != LIQ_WATER && obj->value[1] != 0 )
     {
-	send_to_char( "It contains some other liquid.\n\r", ch );
+	mxp_to_char( "It contains some other liquid.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -861,9 +861,9 @@
     if ( !is_affected( victim, gsn_blindness ) )
 	return;
     affect_strip( victim, gsn_blindness );
-    send_to_char( "Your vision returns!\n\r", victim );
+    mxp_to_char( "Your vision returns!\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -877,9 +877,9 @@
     heal = dice(3, 8) + level - 6;
     victim->hit = UMIN( victim->hit + heal, victim->max_hit );
     update_pos( victim );
-    send_to_char( "You feel better!\n\r", victim );
+    mxp_to_char( "You feel better!\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -893,9 +893,9 @@
     heal = dice(1, 8) + level / 3;
     victim->hit = UMIN( victim->hit + heal, victim->max_hit );
     update_pos( victim );
-    send_to_char( "You feel better!\n\r", victim );
+    mxp_to_char( "You feel better!\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -908,8 +908,8 @@
     {
 	affect_strip( victim, gsn_poison );
 	act( "$N looks better.", ch, NULL, victim, TO_NOTVICT );
-	send_to_char( "A warm feeling runs through your body.\n\r", victim );
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "A warm feeling runs through your body.\n\r", victim, MXP_ALL );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
     return;
 }
@@ -924,9 +924,9 @@
     heal = dice(2, 8) + level /2 ;
     victim->hit = UMIN( victim->hit + heal, victim->max_hit );
     update_pos( victim );
-    send_to_char( "You feel better!\n\r", victim );
+    mxp_to_char( "You feel better!\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -950,9 +950,9 @@
     af.modifier  = 1;
     affect_to_char( victim, &af );
 
-    send_to_char( "You feel unclean.\n\r", victim );
+    mxp_to_char( "You feel unclean.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -971,9 +971,9 @@
     af.location  = APPLY_NONE;
     af.bitvector = AFF_DETECT_EVIL;
     affect_to_char( victim, &af );
-    send_to_char( "Your eyes tingle.\n\r", victim );
+    mxp_to_char( "Your eyes tingle.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -992,9 +992,9 @@
     af.modifier  = 0;
     af.bitvector = AFF_DETECT_HIDDEN;
     affect_to_char( victim, &af );
-    send_to_char( "Your awareness improves.\n\r", victim );
+    mxp_to_char( "Your awareness improves.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1013,9 +1013,9 @@
     af.location  = APPLY_NONE;
     af.bitvector = AFF_DETECT_INVIS;
     affect_to_char( victim, &af );
-    send_to_char( "Your eyes tingle.\n\r", victim );
+    mxp_to_char( "Your eyes tingle.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1034,9 +1034,9 @@
     af.location  = APPLY_NONE;
     af.bitvector = AFF_DETECT_MAGIC;
     affect_to_char( victim, &af );
-    send_to_char( "Your eyes tingle.\n\r", victim );
+    mxp_to_char( "Your eyes tingle.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1049,13 +1049,13 @@
     if ( obj->item_type == ITEM_DRINK_CON || obj->item_type == ITEM_FOOD )
     {
 	if ( obj->value[3] != 0 )
-	    send_to_char( "You smell poisonous fumes.\n\r", ch );
+	    mxp_to_char( "You smell poisonous fumes.\n\r", ch, MXP_ALL );
 	else
-	    send_to_char( "It looks very delicious.\n\r", ch );
+	    mxp_to_char( "It looks very delicious.\n\r", ch, MXP_ALL );
     }
     else
     {
-	send_to_char( "It doesn't look poisoned.\n\r", ch );
+	mxp_to_char( "It doesn't look poisoned.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1099,7 +1099,7 @@
  
     if( (saves_spell( level, victim )) && (!ch->wizbit) )
       {
-        send_to_char( "Your spell was resisted!\n\r", ch );
+        mxp_to_char( "Your spell was resisted!\n\r", ch, MXP_ALL );
         return;
       }
  
@@ -1113,8 +1113,8 @@
 	      {
                 if( !IS_NPC(victim) )
 		  {
-                    send_to_char( skill_table[paf->type].msg_off, victim );
-                    send_to_char( "\n\r", victim );
+                    mxp_to_char( skill_table[paf->type].msg_off, victim, MXP_ALL );
+                    mxp_to_char( "\n\r", victim, MXP_ALL );
 		  }
  
                 if (paf->type == 57)    /*sanc*/
@@ -1191,7 +1191,7 @@
     CHAR_DATA *vch;
     CHAR_DATA *vch_next;
 
-    send_to_char( "The earth trembles beneath your feet!\n\r", ch );
+    mxp_to_char( "The earth trembles beneath your feet!\n\r", ch, MXP_ALL );
     act( "$n makes the earth tremble and shiver.", ch, NULL, NULL, TO_ROOM );
 
     for ( vch = char_list; vch != NULL; vch = vch_next )
@@ -1207,7 +1207,7 @@
 	}
 
 	if ( vch->in_room->area == ch->in_room->area )
-	    send_to_char( "The earth trembles and shivers.\n\r", vch );
+	    mxp_to_char( "The earth trembles and shivers.\n\r", vch, MXP_ALL );
     }
 
     return;
@@ -1279,7 +1279,7 @@
 	act( "$p glows yellow.", ch, obj, NULL, TO_CHAR );
     }
 
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1370,7 +1370,7 @@
     af.modifier  = 2 * level;
     af.bitvector = AFF_FAERIE_FIRE;
     affect_to_char( victim, &af );
-    send_to_char( "You are surrounded by a pink outline.\n\r", victim );
+    mxp_to_char( "You are surrounded by a pink outline.\n\r", victim, MXP_ALL );
     act( "$n is surrounded by a pink outline.", victim, NULL, NULL, TO_ROOM );
     return;
 }
@@ -1382,7 +1382,7 @@
     CHAR_DATA *ich;
 
     act( "$n conjures a cloud of purple smoke.", ch, NULL, NULL, TO_ROOM );
-    send_to_char( "You conjure a cloud of purple smoke.\n\r", ch );
+    mxp_to_char( "You conjure a cloud of purple smoke.\n\r", ch, MXP_ALL );
 
     for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
     {
@@ -1399,7 +1399,7 @@
 	REMOVE_BIT   ( ich->affected_by, AFF_INVISIBLE	);
 	REMOVE_BIT   ( ich->affected_by, AFF_SNEAK	);
 	act( "$n is revealed!", ich, NULL, NULL, TO_ROOM );
-	send_to_char( "You are revealed!\n\r", ich );
+	mxp_to_char( "You are revealed!\n\r", ich, MXP_ALL );
     }
 
     return;
@@ -1420,7 +1420,7 @@
     af.modifier  = 0;
     af.bitvector = AFF_FLYING;
     affect_to_char( victim, &af );
-    send_to_char( "Your feet rise off the ground.\n\r", victim );
+    mxp_to_char( "Your feet rise off the ground.\n\r", victim, MXP_ALL );
     act( "$n's feet rise off the ground.", victim, NULL, NULL, TO_ROOM );
     return;
 }
@@ -1466,9 +1466,9 @@
     af.modifier  = 1 + (level >= 18) + (level >= 25);
     af.bitvector = 0;
     affect_to_char( victim, &af );
-    send_to_char( "You feel stronger.\n\r", victim );
+    mxp_to_char( "You feel stronger.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1494,9 +1494,9 @@
     CHAR_DATA *victim = (CHAR_DATA *) vo;
     victim->hit = UMIN( victim->hit + 100, victim->max_hit );
     update_pos( victim );
-    send_to_char( "A warm feeling fills your body.\n\r", victim );
+    mxp_to_char( "A warm feeling fills your body.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1535,65 +1535,65 @@
 	obj->cost,
 	obj->level
 	);
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     switch ( obj->item_type )
     {
     case ITEM_SCROLL: 
     case ITEM_POTION:
 	sprintf( buf, "Level %d spells of:", obj->value[0] );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 
 	if ( obj->value[1] >= 0 && obj->value[1] < MAX_SKILL )
 	{
-	    send_to_char( " '", ch );
-	    send_to_char( skill_table[obj->value[1]].name, ch );
-	    send_to_char( "'", ch );
+	    mxp_to_char( " '", ch, MXP_ALL );
+	    mxp_to_char( skill_table[obj->value[1]].name, ch, MXP_ALL );
+	    mxp_to_char( "'", ch, MXP_ALL );
 	}
 
 	if ( obj->value[2] >= 0 && obj->value[2] < MAX_SKILL )
 	{
-	    send_to_char( " '", ch );
-	    send_to_char( skill_table[obj->value[2]].name, ch );
-	    send_to_char( "'", ch );
+	    mxp_to_char( " '", ch, MXP_ALL );
+	    mxp_to_char( skill_table[obj->value[2]].name, ch, MXP_ALL );
+	    mxp_to_char( "'", ch, MXP_ALL );
 	}
 
 	if ( obj->value[3] >= 0 && obj->value[3] < MAX_SKILL )
 	{
-	    send_to_char( " '", ch );
-	    send_to_char( skill_table[obj->value[3]].name, ch );
-	    send_to_char( "'", ch );
+	    mxp_to_char( " '", ch, MXP_ALL );
+	    mxp_to_char( skill_table[obj->value[3]].name, ch, MXP_ALL );
+	    mxp_to_char( "'", ch, MXP_ALL );
 	}
 
-	send_to_char( ".\n\r", ch );
+	mxp_to_char( ".\n\r", ch, MXP_ALL );
 	break;
 
     case ITEM_WAND: 
     case ITEM_STAFF: 
 	sprintf( buf, "Has %d(%d) charges of level %d",
 	    obj->value[1], obj->value[2], obj->value[0] );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
       
 	if ( obj->value[3] >= 0 && obj->value[3] < MAX_SKILL )
 	{
-	    send_to_char( " '", ch );
-	    send_to_char( skill_table[obj->value[3]].name, ch );
-	    send_to_char( "'", ch );
+	    mxp_to_char( " '", ch, MXP_ALL );
+	    mxp_to_char( skill_table[obj->value[3]].name, ch, MXP_ALL );
+	    mxp_to_char( "'", ch, MXP_ALL );
 	}
 
-	send_to_char( ".\n\r", ch );
+	mxp_to_char( ".\n\r", ch, MXP_ALL );
 	break;
       
     case ITEM_WEAPON:
 	sprintf( buf, "Damage is %d to %d (average %d).\n\r",
 	    obj->value[1], obj->value[2],
 	    ( obj->value[1] + obj->value[2] ) / 2 );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	break;
 
     case ITEM_ARMOR:
 	sprintf( buf, "Armor class is %d.\n\r", obj->value[0] );
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
 	break;
     }
 
@@ -1603,7 +1603,7 @@
 	{
 	    sprintf( buf, "Affects %s by %d.\n\r",
 		affect_loc_name( paf->location ), paf->modifier );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	}
     }
 
@@ -1613,7 +1613,7 @@
 	{
 	    sprintf( buf, "Affects %s by %d.\n\r",
 		affect_loc_name( paf->location ), paf->modifier );
-	    send_to_char( buf, ch );
+	    mxp_to_char( buf, ch, MXP_ALL );
 	}
     }
 
@@ -1636,9 +1636,9 @@
     af.modifier  = 0;
     af.bitvector = AFF_INFRARED;
     affect_to_char( victim, &af );
-    send_to_char( "Your eyes glow red.\n\r", victim );
+    mxp_to_char( "Your eyes glow red.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1659,9 +1659,9 @@
     af.modifier  = 0;
     af.bitvector = AFF_INVISIBLE;
     affect_to_char( victim, &af );
-    send_to_char( "You fade out of existence.\n\r", victim );
+    mxp_to_char( "You fade out of existence.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1745,11 +1745,11 @@
 	}
 
 	buf[0] = UPPER(buf[0]);
-	send_to_char( buf, ch );
+	mxp_to_char( buf, ch, MXP_ALL );
     }
 
     if ( !found )
-	send_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch );
+	mxp_to_char( "Nothing like that in hell, earth, or heaven.\n\r", ch, MXP_ALL );
 
     return;
 }
@@ -1791,7 +1791,7 @@
 	if ( !is_same_group( gch, ch ) || IS_AFFECTED(gch, AFF_INVISIBLE) )
 	    continue;
 	act( "$n slowly fades out of existence.", gch, NULL, NULL, TO_ROOM );
-	send_to_char( "You slowly fade out of existence.\n\r", gch );
+	mxp_to_char( "You slowly fade out of existence.\n\r", gch, MXP_ALL );
 	af.type      = sn;
 	af.duration  = 24;
 	af.location  = APPLY_NONE;
@@ -1799,7 +1799,7 @@
 	af.bitvector = AFF_INVISIBLE;
 	affect_to_char( gch, &af );
     }
-    send_to_char( "Ok.\n\r", ch );
+    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
 
     return;
 }
@@ -1808,7 +1808,7 @@
 
 void spell_null( int sn, int level, CHAR_DATA *ch, void *vo )
 {
-    send_to_char( "That's not a spell!\n\r", ch );
+    mxp_to_char( "That's not a spell!\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1828,7 +1828,7 @@
     af.bitvector = AFF_PASS_DOOR;
     affect_to_char( victim, &af );
     act( "$n turns translucent.", victim, NULL, NULL, TO_ROOM );
-    send_to_char( "You turn translucent.\n\r", victim );
+    mxp_to_char( "You turn translucent.\n\r", victim, MXP_ALL );
     return;
 }
 
@@ -1847,9 +1847,9 @@
     af.modifier  = -2;
     af.bitvector = AFF_POISON;
     affect_join( victim, &af );
-    send_to_char( "You feel very sick.\n\r", victim );
+    mxp_to_char( "You feel very sick.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1868,9 +1868,9 @@
     af.modifier  = 0;
     af.bitvector = AFF_PROTECT;
     affect_to_char( victim, &af );
-    send_to_char( "You feel protected.\n\r", victim );
+    mxp_to_char( "You feel protected.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1880,9 +1880,9 @@
 {
     CHAR_DATA *victim = (CHAR_DATA *) vo;
     victim->move = UMIN( victim->move + level, victim->max_move );
-    send_to_char( "You feel less tired.\n\r", victim );
+    mxp_to_char( "You feel less tired.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
@@ -1894,9 +1894,9 @@
     if ( is_affected( victim, gsn_curse ) )
     {
 	affect_strip( victim, gsn_curse );
-	send_to_char( "You feel better.\n\r", victim );
+	mxp_to_char( "You feel better.\n\r", victim, MXP_ALL );
 	if ( ch != victim )
-	    send_to_char( "Ok.\n\r", ch );
+	    mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     }
 
     return;
@@ -1918,7 +1918,7 @@
     af.bitvector = AFF_SANCTUARY;
     affect_to_char( victim, &af );
     act( "$n is surrounded by a white aura.", victim, NULL, NULL, TO_ROOM );
-    send_to_char( "You are surrounded by a white aura.\n\r", victim );
+    mxp_to_char( "You are surrounded by a white aura.\n\r", victim, MXP_ALL );
     return;
 }
 
@@ -1938,7 +1938,7 @@
     af.bitvector = 0;
     affect_to_char( victim, &af );
     act( "$n is surrounded by a force shield.", victim, NULL, NULL, TO_ROOM );
-    send_to_char( "You are surrounded by a force shield.\n\r", victim );
+    mxp_to_char( "You are surrounded by a force shield.\n\r", victim, MXP_ALL );
     return;
 }
 
@@ -1988,7 +1988,7 @@
 
     if ( IS_AWAKE(victim) )
     {
-	send_to_char( "You feel very sleepy ..... zzzzzz.\n\r", victim );
+	mxp_to_char( "You feel very sleepy ..... zzzzzz.\n\r", victim, MXP_ALL );
 	act( "$n goes to sleep.", victim, NULL, NULL, TO_ROOM );
 	victim->position = POS_SLEEPING;
     }
@@ -2012,7 +2012,7 @@
     af.bitvector = 0;
     affect_to_char( victim, &af );
     act( "$n's skin turns to stone.", victim, NULL, NULL, TO_ROOM );
-    send_to_char( "Your skin turns to stone.\n\r", victim );
+    mxp_to_char( "Your skin turns to stone.\n\r", victim, MXP_ALL );
     return;
 }
 
@@ -2034,7 +2034,7 @@
     ||   victim->in_room->area != ch->in_room->area
     ||   (IS_NPC(victim) && saves_spell( level, victim ) ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2060,7 +2060,7 @@
     || ( victim != ch
     && ( saves_spell( level, victim ) || saves_spell( level, victim ) ) ) )
     {
-	send_to_char( "You failed.\n\r", ch );
+	mxp_to_char( "You failed.\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -2099,7 +2099,7 @@
     for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
     {
 	if ( !is_name( speaker, vch->name ) )
-	    send_to_char( saves_spell( level, vch ) ? buf2 : buf1, vch );
+	    mxp_to_char( saves_spell( level, vch ) ? buf2 : buf1, vch, MXP_ALL );
     }
 
     return;
@@ -2120,9 +2120,9 @@
     af.modifier  = -2;
     af.bitvector = 0;
     affect_to_char( victim, &af );
-    send_to_char( "You feel weaker.\n\r", victim );
+    mxp_to_char( "You feel weaker.\n\r", victim, MXP_ALL );
     if ( ch != victim )
-	send_to_char( "Ok.\n\r", ch );
+	mxp_to_char( "Ok.\n\r", ch, MXP_ALL );
     return;
 }
 
diff -u srcorig/Makefile src/Makefile
--- srcorig/Makefile	2004-12-01 08:18:50.000000000 -0600
+++ src/Makefile	2004-12-13 18:26:51.000000000 -0600
@@ -1,12 +1,12 @@
 CC      = gcc
 PROF    = -g
-NOCRYPT = -DNOCRYPT
-C_FLAGS = -O -Wall $(PROF) $(NOCRYPT)
-L_FLAGS = -O $(PROF)
+NOCRYPT = 
+C_FLAGS = -Wall $(PROF) $(NOCRYPT)
+L_FLAGS = $(PROF) -lz -lcrypt
 
 O_FILES = act_comm.o act_info.o act_move.o act_obj.o act_wiz.o comm.o const.o \
           db.o fight.o handler.o interp.o magic.o mob_commands.o mob_prog.o   \
-	  save.o special.o update.o
+	  save.o special.o update.o mxp.o mccp.o
 
 merc: $(O_FILES)
 	rm -f merc
Only in src: mccp.c
diff -u srcorig/merc.h src/merc.h
--- srcorig/merc.h	2004-12-01 08:18:50.000000000 -0600
+++ src/merc.h	2004-12-13 18:25:05.000000000 -0600
@@ -15,7 +15,8 @@
  *  around, comes around.                                                  *
  ***************************************************************************/
 
-
+#include <zlib.h>
+#include "mxp.h" // Added for MXP - Celestian
 
 /*
  * Accommodate old non-Ansi compilers.
@@ -122,7 +123,11 @@
 #define PULSE_TICK		  (30 * PULSE_PER_SECOND)
 #define PULSE_AREA		  (60 * PULSE_PER_SECOND)
 
-
+#define TELOPT_COMPRESS       85
+#define COMPRESS_BUF_SIZE   8192
+bool  write_to_descriptor    args (( DESCRIPTOR_DATA *d, char *txt, int length ));
+bool  write_to_descriptor_2  args (( int desc, char *txt, int length ));
+bool  writeCompressed    args (( DESCRIPTOR_DATA * desc, char *txt, int length ));
 
 /*
  * Site ban structure.
@@ -203,6 +208,10 @@
     char *		outbuf;
     int			outsize;
     int			outtop;
+    bool                mxp;
+    unsigned char       compressing;
+    z_stream       *    out_compress;
+    unsigned char  *    out_compress_buf;
 };
 
 
@@ -707,7 +716,7 @@
 #define PLR_FREEZE		2097152
 #define PLR_THIEF		4194304
 #define PLR_KILLER		8388608
-
+#define PLR_MXP                16777216
 
 
 /*
@@ -1856,6 +1865,18 @@
 void	gain_condition	args( ( CHAR_DATA *ch, int iCond, int value ) );
 void	update_handler	args( ( void ) );
 
+/* mxp.c */
+void  mxp_to_char               ( char *txt, CHAR_DATA *ch, int mxp_style );
+void  shutdown_mxp              ( DESCRIPTOR_DATA *d );
+void  init_mxp                  ( DESCRIPTOR_DATA *d );
+
+/* mxp macro */
+#define USE_MXP(ch)             (IS_SET(ch->act, PLR_MXP) && ch->desc->mxp)
+
+/* command to turn on mxp */
+DECLARE_DO_FUN( do_mxp );
+DECLARE_DO_FUN( do_compress );
+
 #undef	CD
 #undef	MID
 #undef	OD
diff -u srcorig/mob_commands.c src/mob_commands.c
--- srcorig/mob_commands.c	2004-12-01 08:18:50.000000000 -0600
+++ src/mob_commands.c	2004-12-06 07:46:02.000000000 -0600
@@ -79,49 +79,49 @@
 
     if ( arg[0] == '\0' )
     {
-	send_to_char( "MobProg stat whom?\n\r", ch );
+	mxp_to_char( "MobProg stat whom?\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( ( victim = get_char_world( ch, arg ) ) == NULL )
     {
-	send_to_char( "They aren't here.\n\r", ch );
+	mxp_to_char( "They aren't here.\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !IS_NPC( victim ) )
     {
-	send_to_char( "Only Mobiles can have Programs!\n\r", ch);
+	mxp_to_char( "Only Mobiles can have Programs!\n\r", ch, MXP_ALL );
 	return;
     }
 
     if ( !( victim->pIndexData->progtypes ) )
     {
-	send_to_char( "That Mobile has no Programs set.\n\r", ch);
+	mxp_to_char( "That Mobile has no Programs set.\n\r", ch, MXP_ALL );
 	return;
     }
 
     sprintf( buf, "Name: %s.  Vnum: %d.\n\r",
 	victim->name, victim->pIndexData->vnum );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "Short description: %s.\n\rLong  description: %s",
 	    victim->short_descr,
 	    victim->long_descr[0] != '\0' ?
 	    victim->long_descr : "(none).\n\r" );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf, "Hp: %d/%d.  Mana: %d/%d.  Move: %d/%d. \n\r",
 	victim->hit,         victim->max_hit,
 	victim->mana,        victim->max_mana,
 	victim->move,        victim->max_move );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     sprintf( buf,
 	"Lv: %d.  Class: %d.  Align: %d.  AC: %d.  Gold: %d.  Exp: %d.\n\r",
 	victim->level,       victim->class,        victim->alignment,
 	GET_AC( victim ),    victim->gold,         victim->exp );
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
 
     for ( mprg = victim->pIndexData->mobprogs; mprg != NULL;
 	 mprg = mprg->next )
@@ -130,7 +130,7 @@
 	      mprog_type_to_name( mprg->type ),
 	      mprg->arglist,
 	      mprg->comlist );
-      send_to_char( buf, ch );
+      mxp_to_char( buf, ch, MXP_ALL );
     }
 
     return;
@@ -147,7 +147,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
         return;
     }
 
@@ -186,7 +186,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -244,7 +244,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -293,7 +293,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-       send_to_char( "Huh?\n\r", ch );
+       mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
        return;
     }
 
@@ -325,7 +325,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-       send_to_char( "Huh?\n\r", ch );
+       mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
        return;
     }
 
@@ -355,7 +355,7 @@
 {
     if ( !IS_NPC(ch) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
         return;
     }
 
@@ -383,7 +383,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -416,7 +416,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -484,7 +484,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -546,7 +546,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
@@ -583,7 +583,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-        send_to_char( "Huh?\n\r", ch );
+        mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
  
@@ -636,7 +636,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-	send_to_char( "Huh?\n\r", ch );
+	mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
     argument = one_argument( argument, arg1 );
@@ -721,7 +721,7 @@
 
     if ( !IS_NPC( ch ) )
     {
-	send_to_char( "Huh?\n\r", ch );
+	mxp_to_char( "Huh?\n\r", ch, MXP_ALL );
 	return;
     }
 
Only in src: mxp.c
Only in src: mxp.h
diff -u srcorig/update.c src/update.c
--- srcorig/update.c	2004-12-01 08:18:50.000000000 -0600
+++ src/update.c	2004-12-06 07:46:58.000000000 -0600
@@ -84,7 +84,7 @@
 	add_move,	ch->max_move,
 	add_prac,	ch->practice
 	);
-    send_to_char( buf, ch );
+    mxp_to_char( buf, ch, MXP_ALL );
     return;
 }   
 
@@ -98,7 +98,7 @@
     ch->exp = UMAX( 1000, ch->exp + gain );
     while ( ch->level < LEVEL_HERO && ch->exp >= 1000 * (ch->level+1) )
     {
-	send_to_char( "You raise a level!!  ", ch );
+	mxp_to_char( "You raise a level!!  ", ch, MXP_ALL );
 	ch->level += 1;
 	advance_level( ch );
     }
@@ -227,16 +227,16 @@
 	switch ( iCond )
 	{
 	case COND_FULL:
-	    send_to_char( "You are hungry.\n\r",  ch );
+	    mxp_to_char( "You are hungry.\n\r",  ch, MXP_ALL );
 	    break;
 
 	case COND_THIRST:
-	    send_to_char( "You are thirsty.\n\r", ch );
+	    mxp_to_char( "You are thirsty.\n\r", ch, MXP_ALL );
 	    break;
 
 	case COND_DRUNK:
 	    if ( condition != 0 )
-		send_to_char( "You are sober.\n\r", ch );
+		mxp_to_char( "You are sober.\n\r", ch, MXP_ALL );
 	    break;
 	}
     }
@@ -499,7 +499,7 @@
 	    if ( d->connected == CON_PLAYING
 	    &&   IS_OUTSIDE(d->character)
 	    &&   IS_AWAKE(d->character) )
-		send_to_char( buf, d->character );
+		mxp_to_char( buf, d->character, MXP_ALL );
 	}
     }
 
@@ -583,7 +583,7 @@
 			stop_fighting( ch, TRUE );
 		    act( "$n disappears into the void.",
 			ch, NULL, NULL, TO_ROOM );
-		    send_to_char( "You disappear into the void.\n\r", ch );
+		    mxp_to_char( "You disappear into the void.\n\r", ch, MXP_ALL );
 		    save_char_obj( ch );
 		    char_from_room( ch );
 		    char_to_room( ch, get_room_index( ROOM_VNUM_LIMBO ) );
@@ -613,8 +613,8 @@
 		{
 		    if ( paf->type > 0 && skill_table[paf->type].msg_off )
 		    {
-			send_to_char( skill_table[paf->type].msg_off, ch );
-			send_to_char( "\n\r", ch );
+			mxp_to_char( skill_table[paf->type].msg_off, ch, MXP_ALL );
+			mxp_to_char( "\n\r", ch, MXP_ALL );
 		    }
 		}
 	  
@@ -630,7 +630,7 @@
 	if ( IS_AFFECTED(ch, AFF_POISON) )
 	{
 	    act( "$n shivers and suffers.", ch, NULL, NULL, TO_ROOM );
-	    send_to_char( "You shiver and suffer.\n\r", ch );
+	    mxp_to_char( "You shiver and suffer.\n\r", ch, MXP_ALL );
 	    damage( ch, ch, 2, gsn_poison );
 	}
 	else if ( ch->position == POS_INCAP )
